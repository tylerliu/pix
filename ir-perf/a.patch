diff --git a/.gitignore b/.gitignore
index 4130377..38b719c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -39,6 +39,7 @@ replayable.bc
 replayable-tracing.bc
 replayable-tracing
 *.ll
+!ir-perf/snippets/*/*.ll
 res-tree*
 neg-tree*
 *.os
diff --git a/ir-perf/CMakeLists.txt b/ir-perf/CMakeLists.txt
new file mode 100644
index 0000000..ac9e766
--- /dev/null
+++ b/ir-perf/CMakeLists.txt
@@ -0,0 +1,104 @@
+
+cmake_minimum_required(VERSION 3.13)
+project(ir-perf LANGUAGES C CXX)
+
+set(CMAKE_C_STANDARD 11)
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_C_STANDARD_REQUIRED ON)
+
+################################################################################
+# Find bitcode compiler
+################################################################################
+include("${CMAKE_SOURCE_DIR}/cmake/find_bitcode_compiler.cmake")
+message(STATUS "LLVMCC: ${LLVMCC}")
+if (NOT EXISTS "${LLVMCC}")
+  message(FATAL_ERROR "Cannot find C bitcode compiler \"${LLVMCC}\"")
+endif()
+message(STATUS "LLVMCXX: ${LLVMCXX}")
+if (NOT EXISTS "${LLVMCXX}")
+  message(FATAL_ERROR "Cannot find C++ bitcode compiler \"${LLVMCXX}\"")
+endif()
+message(STATUS "LLC: ${LLVMLLC}")
+if (NOT EXISTS "${LLVMLLC}")
+  message(FATAL_ERROR "Cannot find IR compiler \"${LLVMLLC}\"")
+endif()
+
+################################################################################
+# Function for compiling bitcode
+################################################################################
+function(compile_bitcode_library library_name source_files compile_cc_flags compile_cxx_flags opt_suffix)
+    # Compile every source file
+    set(BC_FILES)
+    foreach(source_file ${source_files})
+        # Get filename without extension
+        get_filename_component(file_name_only "${source_file}" NAME_WE)
+        set(bc_file "${CMAKE_CURRENT_BINARY_DIR}/${file_name_only}${opt_suffix}.bc" )
+        get_filename_component(source_file_type "${source_file}" EXT)
+        if("${source_file_type}" STREQUAL ".cpp")
+            add_custom_command(
+                    OUTPUT ${bc_file}
+                    COMMAND ${LLVMCXX} -c "-emit-llvm" ${compile_cxx_flags} "${source_file}" -o ${bc_file}
+                    DEPENDS ${source_file}
+            )
+        else()
+            add_custom_command(
+                    OUTPUT ${bc_file}
+                    COMMAND ${LLVMCC} -c "-emit-llvm" ${compile_cc_flags} "${source_file}" -o ${bc_file}
+                    DEPENDS ${source_file}
+            )
+        endif()
+
+        list(APPEND BC_FILES ${bc_file})
+    endforeach()
+
+    # Add command to link them to an archive
+    add_custom_command(
+            OUTPUT ${library_name}
+            COMMAND ${LLVM_AR} rcs ${library_name} ${BC_FILES}
+            DEPENDS ${BC_FILES}
+    )
+endfunction(compile_bitcode_library)
+
+find_package(Python3 REQUIRED COMPONENTS Interpreter)
+
+# Define template types
+set(TEMPLATE_TYPES arithmetic memory phi pointer fp-arithmetic conversion)
+
+foreach(TEMPLATE_TYPE ${TEMPLATE_TYPES})
+    # Find all snippet files for this template type
+    file(GLOB SNIPPET_FILES "${CMAKE_CURRENT_SOURCE_DIR}/snippets/${TEMPLATE_TYPE}/*.ll")
+    
+    foreach(SNIPPET_FILE ${SNIPPET_FILES})
+        get_filename_component(SNIPPET_NAME ${SNIPPET_FILE} NAME_WE)
+        set(GEN_LL "${CMAKE_CURRENT_BINARY_DIR}/bench_${TEMPLATE_TYPE}_${SNIPPET_NAME}.ll")
+        set(GEN_OBJ "${CMAKE_CURRENT_BINARY_DIR}/bench_${TEMPLATE_TYPE}_${SNIPPET_NAME}.o")
+        set(EXE_NAME "bench_${TEMPLATE_TYPE}_${SNIPPET_NAME}")
+
+        # Generate .ll file from template and snippet
+        add_custom_command(
+            OUTPUT ${GEN_LL}
+            COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/generate_bench_ll.py
+                    ${TEMPLATE_TYPE}
+                    ${CMAKE_CURRENT_SOURCE_DIR}/templates/${TEMPLATE_TYPE}.ll
+                    ${SNIPPET_FILE}
+                    ${GEN_LL}
+            DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/templates/${TEMPLATE_TYPE}.ll ${SNIPPET_FILE}
+        )
+
+        # Compile .ll to .o
+        add_custom_command(
+            OUTPUT ${GEN_OBJ}
+            COMMAND ${LLVMLLC} -O0 -filetype=obj -o ${GEN_OBJ} ${GEN_LL}
+            DEPENDS ${GEN_LL}
+        )
+
+        # Add executable for each snippet
+        add_executable(${EXE_NAME} bench-driver.c ${GEN_OBJ})
+        
+        # Link against math library only for frem operations
+        if(SNIPPET_NAME MATCHES "frem")
+            target_link_libraries(${EXE_NAME} m)
+        endif()
+    endforeach()
+endforeach()
\ No newline at end of file
diff --git a/ir-perf/bench-driver-alloca.c b/ir-perf/bench-driver-alloca.c
new file mode 100644
index 0000000..220b18b
--- /dev/null
+++ b/ir-perf/bench-driver-alloca.c
@@ -0,0 +1,15 @@
+#include <stdio.h>
+#include <stdlib.h>
+
+extern void bench_loop(long N);
+
+void sink(long x) {
+    volatile long y = x;
+    (void)y;
+}
+
+int main(int argc, char** argv) {
+  long N = (argc>1 ? atol(argv[1]) : 1000LL);  // Much smaller default for alloca
+  bench_loop(N);
+  return 0;
+} 
\ No newline at end of file
diff --git a/ir-perf/bench-driver.c b/ir-perf/bench-driver.c
new file mode 100644
index 0000000..4ced208
--- /dev/null
+++ b/ir-perf/bench-driver.c
@@ -0,0 +1,15 @@
+#include <stdio.h>
+#include <stdlib.h>
+
+extern void bench_loop(long N);
+
+void sink(long x) {
+    volatile long y = x;
+    (void)y;
+}
+
+int main(int argc, char** argv) {
+  long N = (argc>1 ? atol(argv[1]) : 100000000LL);
+  bench_loop(N);
+  return 0;
+}
\ No newline at end of file
diff --git a/ir-perf/cmake/find_bitcode_compiler.cmake b/ir-perf/cmake/find_bitcode_compiler.cmake
new file mode 100644
index 0000000..6e35917
--- /dev/null
+++ b/ir-perf/cmake/find_bitcode_compiler.cmake
@@ -0,0 +1,82 @@
+#===------------------------------------------------------------------------===#
+#
+#                     The KLEE Symbolic Virtual Machine
+#
+# This file is distributed under the University of Illinois Open Source
+# License. See LICENSE.TXT for details.
+#
+#===------------------------------------------------------------------------===#
+#
+# This file tries to find compilers to build LLVM bitcode.
+# It is implicitly dependent on `find_llvm.cmake` already being run in the
+# same scope.
+#
+#===------------------------------------------------------------------------===#
+
+message(STATUS "Looking for bitcode compilers")
+
+find_program(
+  LLVMCC
+  NAMES "clang-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}" "clang" "llvm-gcc"
+   # Give the LLVM tools directory higher priority than the system directory.
+  HINTS "${LLVM_TOOLS_BINARY_DIR}"
+)
+if (LLVMCC)
+  message(STATUS "Found ${LLVMCC}")
+else()
+  message(FATAL_ERROR "Failed to find C bitcode compiler")
+endif()
+
+find_program(
+  LLVMCXX
+  NAMES "clang++-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}" "clang++" "llvm-g++"
+   # Give the LLVM tools directory higher priority than the system directory.
+  HINTS "${LLVM_TOOLS_BINARY_DIR}"
+)
+if (LLVMCXX)
+  message(STATUS "Found ${LLVMCXX}")
+else()
+  message(FATAL_ERROR "Failed to find C++ bitcode compiler")
+endif()
+
+find_program(
+  LLVMLLC
+  NAMES "llc-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}" "llc"
+   # Give the LLVM tools directory higher priority than the system directory.
+  HINTS "${LLVM_TOOLS_BINARY_DIR}"
+)
+if (LLVMLLC)
+  message(STATUS "Found ${LLVMLLC}")
+else()
+  message(FATAL_ERROR "Failed to find IR compiler")
+endif()
+
+# Test compiler
+function(test_bitcode_compiler COMPILER SRC_EXT)
+  message(STATUS "Testing bitcode compiler ${COMPILER}")
+  set(SRC_FILE "${CMAKE_BINARY_DIR}/test_bitcode_compiler.${SRC_EXT}")
+  file(WRITE "${SRC_FILE}" "int main(int argc, char** argv) { return 0;}")
+  set(BC_FILE "${SRC_FILE}.bc")
+  execute_process(
+    COMMAND
+      "${COMPILER}"
+      "-c"
+      "-emit-llvm"
+      "-o" "${BC_FILE}"
+      "${SRC_FILE}"
+    RESULT_VARIABLE COMPILE_INVOKE_EXIT_CODE
+  )
+  if ("${COMPILE_INVOKE_EXIT_CODE}" EQUAL 0)
+    message(STATUS "Compile success")
+  else()
+    message(FATAL_ERROR "Compilation failed")
+  endif()
+
+  # Remove temporary files. It's okay to not remove these on failure
+  # as they will be useful for developer debugging.
+  file(REMOVE "${SRC_FILE}")
+  file(REMOVE "${BC_FILE}")
+endfunction()
+
+test_bitcode_compiler("${LLVMCC}" "c")
+test_bitcode_compiler("${LLVMCXX}" "cxx")
diff --git a/ir-perf/generate_bench_ll.py b/ir-perf/generate_bench_ll.py
new file mode 100644
index 0000000..954b122
--- /dev/null
+++ b/ir-perf/generate_bench_ll.py
@@ -0,0 +1,46 @@
+import sys
+from pathlib import Path
+
+template_type = sys.argv[1]  # e.g., "arithmetic", "memory", "phi", "pointer"
+template = Path(sys.argv[2]).read_text()
+snippet = Path(sys.argv[3]).read_text()
+output = sys.argv[4]
+
+# Map template types to function names and template files
+template_configs = {
+    "arithmetic": {
+        "function": "bench_arithmetic",
+        "template_file": "templates/arithmetic.ll"
+    },
+    "memory": {
+        "function": "bench_memory", 
+        "template_file": "templates/memory.ll"
+    },
+    "phi": {
+        "function": "bench_phi",
+        "template_file": "templates/phi.ll"
+    },
+    "pointer": {
+        "function": "bench_pointer",
+        "template_file": "templates/pointer.ll"
+    },
+    "fp-arithmetic": {
+        "function": "bench_fp_arithmetic",
+        "template_file": "templates/fp-arithmetic.ll"
+    },
+    "conversion": {
+        "function": "bench_conversion",
+        "template_file": "templates/conversion.ll"
+    }
+}
+
+if template_type not in template_configs:
+    print(f"Error: Unknown template type '{template_type}'")
+    sys.exit(1)
+
+config = template_configs[template_type]
+
+start = template.index('; --- The instruction you want to measure: ---')
+end = template.index('; -------------------------------------------', start)
+new_ll = template[:start] + '; --- The instruction you want to measure: ---\n' + snippet + '\n' + template[end:]
+Path(output).write_text(new_ll) 
\ No newline at end of file
diff --git a/ir-perf/operators.txt b/ir-perf/operators.txt
new file mode 100644
index 0000000..9798461
--- /dev/null
+++ b/ir-perf/operators.txt
@@ -0,0 +1,84 @@
+const char *Instruction::getOpcodeName(unsigned OpCode) {
+  switch (OpCode) {
+  // Terminators
+  case Ret:    return "ret";
+  case Br:     return "br";
+  case Switch: return "switch";
+  case IndirectBr: return "indirectbr";
+  case Invoke: return "invoke";
+  case Resume: return "resume";
+  case Unreachable: return "unreachable";
+  case CleanupRet: return "cleanupret";
+  case CatchRet: return "catchret";
+  case CatchPad: return "catchpad";
+  case CatchSwitch: return "catchswitch";
+  case CallBr: return "callbr";
+
+  // Standard unary operators... (done)
+  case FNeg: return "fneg";
+
+  // Standard binary operators... (done)
+  case Add: return "add";
+  case FAdd: return "fadd";
+  case Sub: return "sub";
+  case FSub: return "fsub";
+  case Mul: return "mul";
+  case FMul: return "fmul";
+  case UDiv: return "udiv";
+  case SDiv: return "sdiv";
+  case FDiv: return "fdiv";
+  case URem: return "urem";
+  case SRem: return "srem";
+  case FRem: return "frem";
+
+  // Logical operators... (done)
+  case And: return "and";
+  case Or : return "or";
+  case Xor: return "xor";
+
+  // Memory instructions...
+  case Alloca:        return "alloca";
+  case Load:          return "load";
+  case Store:         return "store";
+  case AtomicCmpXchg: return "cmpxchg";
+  case AtomicRMW:     return "atomicrmw";
+  case Fence:         return "fence";
+  case GetElementPtr: return "getelementptr";
+
+  // Convert instructions... (done)
+  case Trunc:         return "trunc";
+  case ZExt:          return "zext";
+  case SExt:          return "sext";
+  case FPTrunc:       return "fptrunc";
+  case FPExt:         return "fpext";
+  case FPToUI:        return "fptoui";
+  case FPToSI:        return "fptosi";
+  case UIToFP:        return "uitofp";
+  case SIToFP:        return "sitofp";
+  case IntToPtr:      return "inttoptr";
+  case PtrToInt:      return "ptrtoint";
+  case BitCast:       return "bitcast";
+  case AddrSpaceCast: return "addrspacecast";
+
+  // Other instructions...
+  case ICmp:           return "icmp";
+  case FCmp:           return "fcmp";
+  case PHI:            return "phi";
+  case Select:         return "select";
+  case Call:           return "call";
+  case Shl:            return "shl";
+  case LShr:           return "lshr";
+  case AShr:           return "ashr";
+  case VAArg:          return "va_arg";
+  case ExtractElement: return "extractelement";
+  case InsertElement:  return "insertelement";
+  case ShuffleVector:  return "shufflevector";
+  case ExtractValue:   return "extractvalue";
+  case InsertValue:    return "insertvalue";
+  case LandingPad:     return "landingpad";
+  case CleanupPad:     return "cleanuppad";
+  case Freeze:         return "freeze";
+
+  default: return "<Invalid operator> ";
+  }
+}
\ No newline at end of file
diff --git a/ir-perf/run_benchmarks.py b/ir-perf/run_benchmarks.py
new file mode 100644
index 0000000..1d1d056
--- /dev/null
+++ b/ir-perf/run_benchmarks.py
@@ -0,0 +1,573 @@
+#!/usr/bin/env python3
+"""
+Comprehensive IR instruction benchmarking script.
+Measures cycle counts with proper CPU isolation and overhead subtraction.
+"""
+
+import subprocess
+import sys
+import os
+import re
+import argparse
+import signal
+import atexit
+from pathlib import Path
+import decimal
+import csv
+from datetime import datetime
+
+class BenchmarkRunner:
+    def __init__(self, cpu_core=3, iterations=100000000, verbose=False):
+        self.cpu_core = cpu_core
+        self.iterations = iterations
+        self.verbose = verbose
+        self.build_dir = Path("build")
+        self.original_settings = {}
+        self.setup_completed = False
+        self.supported_commands = {}
+        
+        # Register cleanup on exit
+        atexit.register(self.teardown)
+        signal.signal(signal.SIGINT, self.signal_handler)
+        signal.signal(signal.SIGTERM, self.signal_handler)
+    
+    def signal_handler(self, signum, frame):
+        """Handle interrupt signals to ensure cleanup."""
+        print(f"\nReceived signal {signum}, cleaning up...")
+        self.teardown()
+        sys.exit(1)
+    
+    def get_current_settings(self):
+        """Get current CPU settings to restore later."""
+        try:
+            # Get current governor and frequency info
+            result = subprocess.run([
+                "cpupower", "-c", str(self.cpu_core), "frequency-info"
+            ], capture_output=True, text=True, check=True)
+            
+            # Parse governor from output
+            for line in result.stdout.split('\n'):
+                if 'current policy:' in line:
+                    # Extract governor from "The governor "X" may decide..."
+                    if 'governor "' in line:
+                        governor_start = line.find('governor "') + 9
+                        governor_end = line.find('"', governor_start)
+                        if governor_end > governor_start:
+                            governor = line[governor_start:governor_end]
+                            self.original_settings['governor'] = governor
+                            break
+            
+            # Try to get frequency limits using the -l option for raw format
+            try:
+                freq_result = subprocess.run([
+                    "cpupower", "-c", str(self.cpu_core), "frequency-info", "-l"
+                ], capture_output=True, text=True, check=True)
+                
+                # Parse raw frequency format (e.g., "1500000 2900000")
+                freq_lines = freq_result.stdout.strip().split('\n')
+                if len(freq_lines) >= 2:
+                    freq_parts = freq_lines[1].strip().split()
+                    if len(freq_parts) >= 2:
+                        self.original_settings['min_freq'] = freq_parts[0]
+                        self.original_settings['max_freq'] = freq_parts[1]
+                        print("✓ Captured current CPU settings for restoration")
+                        return
+            except subprocess.CalledProcessError:
+                pass  # Fall back to parsing the verbose output
+            
+            # Fallback: Parse frequency limits from verbose output
+            for line in result.stdout.split('\n'):
+                if 'hardware limits:' in line:
+                    # Extract min and max frequencies
+                    freq_range = line.split(':')[1].strip()
+                    if 'GHz' in freq_range:
+                        parts = freq_range.split('-')
+                        if len(parts) == 2:
+                            min_freq = decimal.Decimal(parts[0].strip().replace(' GHz', '')) * 1000000
+                            max_freq = decimal.Decimal(parts[1].strip().replace(' GHz', '')) * 1000000
+                            self.original_settings['min_freq'] = min_freq
+                            self.original_settings['max_freq'] = max_freq
+                            break
+            
+            print("✓ Captured current CPU settings for restoration")
+            
+        except subprocess.CalledProcessError as e:
+            print(f"⚠ Warning: Could not capture current settings: {e}")
+            # Set defaults
+            self.original_settings['governor'] = 'ondemand'
+    
+    def check_cpupower_support(self):
+        """Check which cpupower subcommands are available."""
+        supported_commands = {}
+        
+        # Check if frequency-set is supported
+        try:
+            result = subprocess.run([
+                "cpupower", "frequency-set", "--help"
+            ], capture_output=True, text=True, check=True)
+            supported_commands['frequency-set'] = True
+        except (subprocess.CalledProcessError, FileNotFoundError):
+            supported_commands['frequency-set'] = False
+        
+        # Check if idle-set is supported
+        try:
+            result = subprocess.run([
+                "cpupower", "idle-set", "--help"
+            ], capture_output=True, text=True, check=True)
+            supported_commands['idle-set'] = True
+        except (subprocess.CalledProcessError, FileNotFoundError):
+            supported_commands['idle-set'] = False
+        
+        return supported_commands
+    
+    def setup_cpu(self):
+        """Set CPU to performance mode and pin to specific core."""
+        print("Setting up CPU for benchmarking...")
+        
+        # Check what cpupower features are available
+        self.supported_commands = self.check_cpupower_support()
+        
+        # Capture current settings first
+        self.get_current_settings()
+        
+        # Print current settings before changing
+        print(f"Current CPU {self.cpu_core} settings:")
+        if 'governor' in self.original_settings:
+            print(f"  Governor: {self.original_settings['governor']}")
+        if 'min_freq' in self.original_settings and 'max_freq' in self.original_settings:
+            print(f"  Frequency range: {self.original_settings['min_freq']} - {self.original_settings['max_freq']} Hz")
+        print()
+        
+        # Set CPU governor to performance (if supported)
+        if self.supported_commands.get('frequency-set', False):
+            try:
+                subprocess.run([
+                    "sudo", "cpupower", "-c", str(self.cpu_core), "frequency-set", 
+                    "-g", "performance"
+                ], check=True, capture_output=True)
+                print(f"✓ Set CPU {self.cpu_core} to performance mode")
+            except subprocess.CalledProcessError as e:
+                print(f"⚠ Warning: Could not set CPU governor: {e}")
+        else:
+            print("⚠ Note: CPU frequency control not available, skipping governor setting")
+        
+        # Disable CPU idle states for more consistent performance (if supported)
+        if self.supported_commands.get('idle-set', False):
+            try:
+                subprocess.run([
+                    "sudo", "cpupower", "-c", str(self.cpu_core), "idle-set", "-d", "0"
+                ], check=True, capture_output=True)
+                print("✓ Disabled CPU idle states")
+            except subprocess.CalledProcessError as e:
+                print(f"⚠ Warning: Could not disable CPU idle states: {e}")
+        else:
+            print("⚠ Note: CPU idle state control not available, skipping idle state setting")
+        
+        self.setup_completed = True
+    
+    def teardown(self):
+        """Restore original CPU settings."""
+        if not self.setup_completed:
+            return
+        
+        print("\nRestoring CPU settings...")
+        
+        # Restore governor (only if frequency-set was supported)
+        if self.supported_commands.get('frequency-set', False) and 'governor' in self.original_settings:
+            try:
+                subprocess.run([
+                    "sudo", "cpupower", "-c", str(self.cpu_core), "frequency-set",
+                    "-g", self.original_settings['governor']
+                ], check=True, capture_output=True)
+                print(f"✓ Restored governor to {self.original_settings['governor']}")
+            except subprocess.CalledProcessError as e:
+                print(f"⚠ Warning: Could not restore governor: {e}")
+        elif self.supported_commands.get('frequency-set', False):
+            # Fallback: restore to ondemand
+            try:
+                subprocess.run([
+                    "sudo", "cpupower", "-c", str(self.cpu_core), "frequency-set",
+                    "-g", "ondemand"
+                ], check=True, capture_output=True)
+                print("✓ Restored governor to ondemand (fallback)")
+            except subprocess.CalledProcessError as e:
+                print(f"⚠ Warning: Could not restore governor: {e}")
+        
+        # Restore frequency limits if we have them and frequency-set is supported
+        if (self.supported_commands.get('frequency-set', False) and 
+            'max_freq' in self.original_settings and 'min_freq' in self.original_settings):
+            try:
+                subprocess.run([
+                    "sudo", "cpupower", "-c", str(self.cpu_core), "frequency-set",
+                    "-u", self.original_settings['max_freq'], 
+                    "-d", self.original_settings['min_freq']
+                ], check=True, capture_output=True)
+                print(f"✓ Restored frequency limits")
+            except subprocess.CalledProcessError as e:
+                print(f"⚠ Warning: Could not restore frequency limits: {e}")
+        
+        # Re-enable CPU idle states (only if idle-set was supported)
+        if self.supported_commands.get('idle-set', False):
+            try:
+                subprocess.run([
+                    "sudo", "cpupower", "-c", str(self.cpu_core), "idle-set", "-e", "0"
+                ], check=True, capture_output=True)
+                print("✓ Re-enabled CPU idle states")
+            except subprocess.CalledProcessError as e:
+                print(f"⚠ Warning: Could not re-enable CPU idle states: {e}")
+        
+        print("✓ CPU settings restored")
+    
+    def warm_up(self, executable):
+        """Run executable once to warm up caches."""
+        if self.verbose:
+            print(f"Warming up {executable}...")
+        try:
+            subprocess.run([
+                "taskset", "-c", str(self.cpu_core),
+                str(self.build_dir / executable),
+                str(self.iterations)
+            ], check=True, capture_output=True)
+            if self.verbose:
+                print("✓ Warm-up completed")
+        except subprocess.CalledProcessError as e:
+            if self.verbose:
+                print(f"✗ Warm-up failed: {e}")
+            return False
+        return True
+    
+    def check_perf_permissions(self):
+        """Check if perf works without sudo and warn if needed."""
+        try:
+            # Try to run a simple perf command
+            result = subprocess.run([
+                "perf", "stat", "-e", "cycles", "true"
+            ], capture_output=True, text=True, timeout=5)
+            return True
+        except (subprocess.CalledProcessError, subprocess.TimeoutExpired, FileNotFoundError):
+            return False
+    
+    def warn_perf_permissions(self):
+        """Warn about perf permission issues."""
+        if not self.check_perf_permissions():
+            print("⚠ Warning: perf may require elevated permissions")
+            print("   Try one of these solutions:")
+            print("   1. Run with sudo: sudo python3 run_benchmarks.py")
+            print("   2. Lower perf paranoid level: sudo sh -c 'echo -1 > /proc/sys/kernel/perf_event_paranoid'")
+            print("   3. Add user to perf group: sudo usermod -a -G perf $USER")
+            print("   Note: Using sudo may affect measurement accuracy")
+            return False
+        return True
+    
+    def run_perf_measurement(self, executable):
+        """Run perf stat measurement on the executable."""
+        if self.verbose:
+            print(f"Measuring {executable}...")
+        executable_path = self.build_dir / executable
+        
+        # Check perf permissions first
+        if not self.warn_perf_permissions():
+            if self.verbose:
+                print("   Continuing anyway, but measurements may fail...")
+        
+        try:
+            result = subprocess.run([
+                "perf", "stat", "-e", "cycles,instructions,branch-misses",
+                "taskset", "-c", str(self.cpu_core), str(executable_path), str(self.iterations)
+            ], capture_output=True, text=True, check=True)
+            return self.parse_perf_output(result.stderr)
+        except subprocess.CalledProcessError as e:
+            if self.verbose:
+                print(f"✗ Perf measurement failed: {e}")
+                print(f"Command: {' '.join(e.cmd)}")
+                print(f"Error output: {e.stderr}")
+            return None
+    
+    def parse_perf_output(self, output):
+        """Parse perf stat output and extract metrics."""
+        metrics = {}
+        
+        # Parse cycles
+        cycles_match = re.search(r'(\d+(?:,\d+)*)\s+cycles', output)
+        if cycles_match:
+            cycles = int(cycles_match.group(1).replace(',', ''))
+            metrics['cycles'] = cycles
+        
+        # Parse instructions
+        insts_match = re.search(r'(\d+(?:,\d+)*)\s+instructions', output)
+        if insts_match:
+            instructions = int(insts_match.group(1).replace(',', ''))
+            metrics['instructions'] = instructions
+        
+        # Parse branch misses
+        branch_misses_match = re.search(r'(\d+(?:,\d+)*)\s+branch-misses', output)
+        if branch_misses_match:
+            branch_misses = int(branch_misses_match.group(1).replace(',', ''))
+            metrics['branch_misses'] = branch_misses
+        
+        if 'cycles' in metrics and 'instructions' in metrics:
+            metrics['cycles_per_inst'] = metrics['cycles'] / metrics['instructions']
+        
+        return metrics
+    
+    def find_benchmarks(self):
+        """Find all benchmark executables."""
+        benchmarks = []
+        for executable in self.build_dir.glob("bench_*"):
+            if executable.is_file() and os.access(executable, os.X_OK):
+                benchmarks.append(executable.name)
+        return sorted(benchmarks)
+    
+    def run_benchmarks(self, specific_benchmarks=None):
+        """Run all benchmarks or specific ones."""
+        if specific_benchmarks:
+            benchmarks = specific_benchmarks
+        else:
+            benchmarks = self.find_benchmarks()
+        
+        if not benchmarks:
+            print("✗ No benchmark executables found in build/")
+            return
+        
+        print(f"Found {len(benchmarks)} benchmarks")
+        
+        # Group benchmarks by instruction type
+        benchmark_groups = self.group_benchmarks(benchmarks)
+        
+        all_results = []
+        latency_results = []
+        
+        for group_name, group_benchmarks in benchmark_groups.items():
+            print(f"\n{'='*50}")
+            print(f"Benchmarking group: {group_name}")
+            print(f"{'='*50}")
+            
+            group_results = []
+            
+            for benchmark in group_benchmarks:
+                if self.verbose:
+                    print(f"\nBenchmarking: {benchmark}")
+                else:
+                    print(f"  Running {benchmark}...", end="", flush=True)
+                
+                # Warm up
+                if not self.warm_up(benchmark):
+                    if not self.verbose:
+                        print(" ✗")
+                    continue
+                
+                # Measure
+                result = self.run_perf_measurement(benchmark)
+                if result:
+                    result['benchmark'] = benchmark
+                    result['group'] = group_name
+                    group_results.append(result)
+                    all_results.append(result)
+                    
+                    # Print results (only if verbose)
+                    if self.verbose:
+                        print(f"Results for {benchmark}:")
+                        print(f"  Cycles: {result['cycles']:,}")
+                        print(f"  Instructions: {result['instructions']:,}")
+                        print(f"  Branch misses: {result.get('branch_misses', 'N/A')}")
+                        print(f"  Cycles/instruction: {result['cycles_per_inst']:.3f}")
+                    else:
+                        print(" ✓")
+            
+            # Calculate latency for this group
+            if len(group_results) >= 2:
+                latency_result = self.calculate_latency(group_results)
+                if latency_result:
+                    latency_results.append(latency_result)
+                    print(f"\nLatency calculation for {group_name}:")
+                    print(f"  Estimated latency: {latency_result['latency']:.3f} cycles/instruction")
+        
+        # Print summary
+        self.print_summary(latency_results)
+        
+        # Save detailed results to CSV
+        if all_results:
+            csv_file = self.save_results_to_csv(all_results)
+            print(f"\nDetailed results saved to: {csv_file}")
+    
+    def group_benchmarks(self, benchmarks):
+        """Group benchmarks by instruction type (e.g., add-imm, add-imm-2, add-imm-4)."""
+        groups = {}
+        
+        for benchmark in benchmarks:
+            # Extract base name (e.g., "add-imm" from "bench_arithmetic_add-imm-2")
+            parts = benchmark.split('_')
+            if len(parts) >= 3:
+                base_name = parts[2]  # e.g., "add-imm"
+                
+                # Find the base instruction name (without count suffix)
+                if '-' in base_name:
+                    base_parts = base_name.split('-')
+                    if base_parts[-1].isdigit():
+                        # Remove the count suffix
+                        base_instruction = '-'.join(base_parts[:-1])
+                    else:
+                        base_instruction = base_name
+                else:
+                    base_instruction = base_name
+                
+                if base_instruction not in groups:
+                    groups[base_instruction] = []
+                groups[base_instruction].append(benchmark)
+        
+        # Sort benchmarks within each group by instruction count
+        for group in groups.values():
+            group.sort(key=lambda x: self.extract_instruction_count(x))
+        
+        return groups
+    
+    def extract_instruction_count(self, benchmark_name):
+        """Extract the number of instructions from benchmark name."""
+        # e.g., "bench_arithmetic_add-imm-2" -> 2
+        parts = benchmark_name.split('_')
+        if len(parts) >= 3:
+            base_name = parts[2]
+            if '-' in base_name:
+                base_parts = base_name.split('-')
+                if base_parts[-1].isdigit():
+                    return int(base_parts[-1])
+        return 1  # Default to 1 instruction
+    
+    def calculate_latency(self, group_results):
+        """Calculate latency by comparing different instruction counts."""
+        if len(group_results) < 2:
+            return None
+        
+        # Sort by instruction count
+        group_results.sort(key=lambda x: self.extract_instruction_count(x['benchmark']))
+        
+        # Calculate latency using linear regression
+        instruction_counts = []
+        cycles_per_inst = []
+        
+        for result in group_results:
+            count = self.extract_instruction_count(result['benchmark'])
+            instruction_counts.append(count)
+            cycles_per_inst.append(result['cycles_per_inst'])
+        
+        # Calculate slope (latency per instruction)
+        if len(instruction_counts) >= 2:
+            # Simple linear regression: slope = (y2-y1)/(x2-x1)
+            x1, y1 = instruction_counts[0], cycles_per_inst[0]
+            x2, y2 = instruction_counts[-1], cycles_per_inst[-1]
+            
+            if x2 != x1:
+                latency = (y2 - y1) / (x2 - x1)
+            else:
+                latency = 0
+            
+            return {
+                'group': group_results[0]['group'],
+                'latency': latency,
+                'instruction_counts': instruction_counts,
+                'cycles_per_inst': cycles_per_inst,
+                'benchmarks': [r['benchmark'] for r in group_results]
+            }
+        
+        return None
+    
+    def print_summary(self, results):
+        """Print a summary table of latency results."""
+        if not results:
+            return
+        
+        print(f"\n{'='*80}")
+        print("LATENCY SUMMARY")
+        print(f"{'='*80}")
+        print(f"{'Instruction Type':<25} {'Latency (cycles)':<15} {'Benchmarks':<30}")
+        print("-" * 80)
+        
+        for result in results:
+            instruction_type = result['group']
+            latency = f"{result['latency']:.3f}"
+            benchmarks = ", ".join(result['benchmarks'])
+            
+            print(f"{instruction_type:<25} {latency:<15} {benchmarks:<30}")
+        
+        print(f"\nNote: Latency is calculated as the difference in cycles/instruction")
+        print(f"between different numbers of the same instruction.")
+    
+    def save_results_to_csv(self, all_results):
+        """Save all benchmark results to a CSV file."""
+        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
+        csv_filename = f"benchmark_results_{timestamp}.csv"
+        
+        with open(csv_filename, 'w', newline='') as csvfile:
+            fieldnames = ['benchmark', 'group', 'cycles', 'instructions', 'branch_misses', 'cycles_per_inst']
+            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
+            
+            writer.writeheader()
+            for result in all_results:
+                writer.writerow({
+                    'benchmark': result['benchmark'],
+                    'group': result['group'],
+                    'cycles': result['cycles'],
+                    'instructions': result['instructions'],
+                    'branch_misses': result.get('branch_misses', 'N/A'),
+                    'cycles_per_inst': f"{result['cycles_per_inst']:.6f}"
+                })
+        
+        print(f"\n✓ Results saved to {csv_filename}")
+        return csv_filename
+
+def check_sudo_usage():
+    """Check if script is running with sudo and warn about it."""
+    if os.geteuid() == 0:  # Running as root
+        print("⚠ Warning: Script is running with sudo/root privileges")
+        print("   This may affect measurement accuracy and is generally not recommended")
+        print("   Consider using one of these alternatives instead:")
+        print("   1. Lower perf paranoid level: sudo sh -c 'echo -1 > /proc/sys/kernel/perf_event_paranoid'")
+        print("   2. Add user to perf group: sudo usermod -a -G perf $USER")
+        print("   3. Use perf with user events only (may be less accurate)")
+        print()
+        return True
+    return False
+
+def main():
+    """Main function."""
+    import sys
+    
+    # Check for sudo usage
+    check_sudo_usage()
+    
+    # Parse command line arguments
+    cpu_core = 3
+    iterations = 100000000
+    specific_benchmarks = None
+    verbose = False
+    
+    # Check for verbose flag
+    if "--verbose" in sys.argv:
+        verbose = True
+        sys.argv.remove("--verbose")
+    
+    if len(sys.argv) > 1:
+        try:
+            cpu_core = int(sys.argv[1])
+        except ValueError:
+            print("Usage: python3 run_benchmarks.py [cpu_core] [iterations] [benchmark1] [benchmark2] ... [--verbose]")
+            print("Example: python3 run_benchmarks.py 3 100000000 bench_arithmetic_add-imm --verbose")
+            sys.exit(1)
+    
+    if len(sys.argv) > 2:
+        try:
+            iterations = int(sys.argv[2])
+        except ValueError:
+            print("Usage: python3 run_benchmarks.py [cpu_core] [iterations] [benchmark1] [benchmark2] ... [--verbose]")
+            sys.exit(1)
+    
+    if len(sys.argv) > 3:
+        specific_benchmarks = sys.argv[3:]
+    
+    # Create and run benchmark runner
+    runner = BenchmarkRunner(cpu_core=cpu_core, iterations=iterations, verbose=verbose)
+    runner.setup_cpu()
+    runner.run_benchmarks(specific_benchmarks)
+
+if __name__ == "__main__":
+    main() 
\ No newline at end of file
diff --git a/ir-perf/snippets/README.md b/ir-perf/snippets/README.md
new file mode 100644
index 0000000..9bc01f5
--- /dev/null
+++ b/ir-perf/snippets/README.md
@@ -0,0 +1,116 @@
+# IR Microbenchmark Tool
+
+This tool is designed to measure the performance of individual LLVM IR instructions or small instruction sequences. It automates the process of benchmarking IR code snippets by integrating them into appropriate loop templates, compiling them, and running them via a C driver.
+
+## Features
+- Benchmarks non-memory LLVM IR instructions
+- Supports multiple template types (arithmetic, memory, phi)
+- Automates snippet insertion, compilation, and executable generation
+- Easy to add new instruction benchmarks and template types
+- Generates a separate executable for each snippet
+
+## How It Works
+1. **Snippets:** Place your LLVM IR instruction(s) in a file in the appropriate `snippets/<category>/` directory (one snippet per file).
+2. **Templates:** Each snippet is inserted into a loop in the appropriate template from `templates/` at a marked location.
+3. **Build:** CMake automatically generates a new `.ll` file for each snippet, compiles it to an object file, and links it with a C driver (`bench-driver.c`) to create an executable.
+4. **Run:** Each executable runs the loop with your instruction(s) and prevents dead-code elimination by calling an external `sink` function.
+
+## Directory Structure
+```
+pix/ir-perf/
+├── templates/           # Different benchmark templates
+│   ├── arithmetic.ll   # For add, sub, mul, etc.
+│   ├── memory.ll       # For load/store instructions
+│   └── phi.ll          # For phi node operations
+├── snippets/           # Instruction snippets (organized by type)
+│   ├── arithmetic/     # Arithmetic operations
+│   ├── memory/         # Memory operations
+│   └── phi/            # Phi node operations
+├── cmake/              # CMake helper scripts
+├── bench-driver.c      # C driver
+├── generate_bench_ll.py # Python script for snippet insertion
+└── CMakeLists.txt      # Build configuration
+```
+
+## Installation & Build
+1. Clone this repository:
+   ```bash
+   git clone <repo-url>
+   cd <repo-directory>/pix/ir-perf
+   ```
+2. Ensure you have LLVM tools (llc, clang, etc.) available and configured in `cmake/find_bitcode_compiler.cmake`.
+3. Build with CMake:
+   ```bash
+   mkdir build && cd build
+   cmake ..
+   make
+   ```
+   This will generate one executable per snippet, organized by template type (e.g., `bench_arithmetic_add-imm` for `snippets/arithmetic/add-imm.ll`).
+
+## Usage
+Run the generated benchmark executable(s):
+```bash
+./bench_arithmetic_add-imm 100000000
+./bench_memory_load 100000000
+./bench_phi_phi-simple 100000000
+```
+- The argument is the number of loop iterations (default is 100,000,000 if not specified).
+
+## Input/Output
+- **Input:** LLVM IR snippet files organized by category (see `snippets/` for examples)
+- **Output:**
+  - One executable per snippet, named after the template type and snippet file
+  - Console output as defined in `bench-driver.c` (typically none; use external timing tools to measure performance)
+
+## Adding New Benchmarks
+
+### Adding New Snippets
+1. Create a new `.ll` file in the appropriate `snippets/<category>/` directory containing the IR instruction(s) you want to benchmark.
+2. Re-run the build (`make`).
+3. A new executable will be generated for your snippet.
+
+### Adding New Template Types
+1. Create a new template file in `templates/` (e.g., `templates/control.ll`).
+2. Add the template type to the `TEMPLATE_TYPES` list in `CMakeLists.txt`.
+3. Update `generate_bench_ll.py` to include the new template type in the `template_configs` dictionary.
+4. Create a corresponding `snippets/<new-type>/` directory.
+
+## Template Types
+
+### Arithmetic Template (`templates/arithmetic.ll`)
+- Designed for arithmetic operations: add, sub, mul, div, etc.
+- Uses simple loop with accumulator pattern
+- Snippets: `snippets/arithmetic/`
+
+### Memory Template (`templates/memory.ll`)
+- Designed for memory operations: load, store, getelementptr, etc.
+- Includes memory allocation and pointer operations
+- Snippets: `snippets/memory/`
+
+### Phi Template (`templates/phi.ll`)
+- Designed for phi node operations
+- Includes multiple basic blocks to demonstrate phi behavior
+- Snippets: `snippets/phi/`
+
+## Configuration
+- Edit template files in `templates/` to change the loop structure or measurement region for each category.
+- Edit `bench-driver.c` to change how the benchmark is invoked or how results are handled.
+- CMake scripts handle snippet discovery and build automation.
+
+## Example Snippets
+
+### Arithmetic (`snippets/arithmetic/add-imm.ll`)
+```llvm
+%next_op1 = add i64 %op1, 42
+```
+
+### Memory (`snippets/memory/load.ll`)
+```llvm
+%val = load i64, i64* %ptr
+%next_sum = add i64 %sum, %val
+```
+
+### Phi (`snippets/phi/phi-simple.ll`)
+```llvm
+%next_val = phi i64 [%val, %loop], [42, %entry]
+```
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/add-imm-2.ll b/ir-perf/snippets/arithmetic/add-imm-2.ll
new file mode 100644
index 0000000..e048084
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/add-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = add i64 %op1, 42
+%next_op1 = add i64 %temp1, 42
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/add-imm-4.ll b/ir-perf/snippets/arithmetic/add-imm-4.ll
new file mode 100644
index 0000000..75f6dca
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/add-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = add i64 %op1, 42
+%temp2 = add i64 %temp1, 42
+%temp3 = add i64 %temp2, 42
+%next_op1 = add i64 %temp3, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/add-imm.ll b/ir-perf/snippets/arithmetic/add-imm.ll
new file mode 100644
index 0000000..7b57808
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/add-imm.ll
@@ -0,0 +1 @@
+%next_op1 = add i64 %op1, 42
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/add-reg-2.ll b/ir-perf/snippets/arithmetic/add-reg-2.ll
new file mode 100644
index 0000000..d8b142e
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/add-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = add i64 %op1, %iv
+%next_op1 = add i64 %temp1, %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/add-reg-4.ll b/ir-perf/snippets/arithmetic/add-reg-4.ll
new file mode 100644
index 0000000..3a64e49
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/add-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = add i64 %op1, %iv
+%temp2 = add i64 %temp1, %iv
+%temp3 = add i64 %temp2, %iv
+%next_op1 = add i64 %temp3, %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/add-reg.ll b/ir-perf/snippets/arithmetic/add-reg.ll
new file mode 100644
index 0000000..f38e618
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/add-reg.ll
@@ -0,0 +1 @@
+%next_op1 = add i64 %op1, %iv
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/and-imm-2.ll b/ir-perf/snippets/arithmetic/and-imm-2.ll
new file mode 100644
index 0000000..f0a872a
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/and-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = and i64 %op1, 42
+%next_op1 = and i64 %temp1, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/and-imm-4.ll b/ir-perf/snippets/arithmetic/and-imm-4.ll
new file mode 100644
index 0000000..38c0f47
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/and-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = and i64 %op1, 42
+%temp2 = and i64 %temp1, 43
+%temp3 = and i64 %temp2, 44
+%next_op1 = and i64 %temp3, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/and-imm.ll b/ir-perf/snippets/arithmetic/and-imm.ll
new file mode 100644
index 0000000..9eb5ed1
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/and-imm.ll
@@ -0,0 +1 @@
+%next_op1 = and i64 %op1, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/and-reg-2.ll b/ir-perf/snippets/arithmetic/and-reg-2.ll
new file mode 100644
index 0000000..16de3db
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/and-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = and i64 %op1, %op1
+%next_op1 = and i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/and-reg-4.ll b/ir-perf/snippets/arithmetic/and-reg-4.ll
new file mode 100644
index 0000000..26e8a58
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/and-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = and i64 %op1, %op1
+%temp2 = and i64 %temp1, %temp1
+%temp3 = and i64 %temp2, %temp2
+%next_op1 = and i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/and-reg.ll b/ir-perf/snippets/arithmetic/and-reg.ll
new file mode 100644
index 0000000..51435dd
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/and-reg.ll
@@ -0,0 +1 @@
+%next_op1 = and i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/ashr-imm-2.ll b/ir-perf/snippets/arithmetic/ashr-imm-2.ll
new file mode 100644
index 0000000..45075c0
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/ashr-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = ashr i64 %op1, 5
+%next_op1 = ashr i64 %temp1, 3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/ashr-imm-4.ll b/ir-perf/snippets/arithmetic/ashr-imm-4.ll
new file mode 100644
index 0000000..7d194d6
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/ashr-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = ashr i64 %op1, 5
+%temp2 = ashr i64 %temp1, 3
+%temp3 = ashr i64 %temp2, 2
+%next_op1 = ashr i64 %temp3, 1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/ashr-imm.ll b/ir-perf/snippets/arithmetic/ashr-imm.ll
new file mode 100644
index 0000000..6cd1840
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/ashr-imm.ll
@@ -0,0 +1 @@
+%next_op1 = ashr i64 %op1, 5 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/ashr-reg-2.ll b/ir-perf/snippets/arithmetic/ashr-reg-2.ll
new file mode 100644
index 0000000..cc16f1e
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/ashr-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = ashr i64 %op1, %op1
+%next_op1 = ashr i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/ashr-reg-4.ll b/ir-perf/snippets/arithmetic/ashr-reg-4.ll
new file mode 100644
index 0000000..46ed9b6
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/ashr-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = ashr i64 %op1, %op1
+%temp2 = ashr i64 %temp1, %temp1
+%temp3 = ashr i64 %temp2, %temp2
+%next_op1 = ashr i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/ashr-reg.ll b/ir-perf/snippets/arithmetic/ashr-reg.ll
new file mode 100644
index 0000000..e5e109e
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/ashr-reg.ll
@@ -0,0 +1 @@
+%next_op1 = ashr i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/lshr-imm-2.ll b/ir-perf/snippets/arithmetic/lshr-imm-2.ll
new file mode 100644
index 0000000..3c3baff
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/lshr-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = lshr i64 %op1, 5
+%next_op1 = lshr i64 %temp1, 3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/lshr-imm-4.ll b/ir-perf/snippets/arithmetic/lshr-imm-4.ll
new file mode 100644
index 0000000..81cd8be
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/lshr-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = lshr i64 %op1, 5
+%temp2 = lshr i64 %temp1, 3
+%temp3 = lshr i64 %temp2, 2
+%next_op1 = lshr i64 %temp3, 1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/lshr-imm.ll b/ir-perf/snippets/arithmetic/lshr-imm.ll
new file mode 100644
index 0000000..d9e25fd
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/lshr-imm.ll
@@ -0,0 +1 @@
+%next_op1 = lshr i64 %op1, 5 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/lshr-reg-2.ll b/ir-perf/snippets/arithmetic/lshr-reg-2.ll
new file mode 100644
index 0000000..7ad3f54
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/lshr-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = lshr i64 %op1, %op1
+%next_op1 = lshr i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/lshr-reg-4.ll b/ir-perf/snippets/arithmetic/lshr-reg-4.ll
new file mode 100644
index 0000000..16f36c4
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/lshr-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = lshr i64 %op1, %op1
+%temp2 = lshr i64 %temp1, %temp1
+%temp3 = lshr i64 %temp2, %temp2
+%next_op1 = lshr i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/lshr-reg.ll b/ir-perf/snippets/arithmetic/lshr-reg.ll
new file mode 100644
index 0000000..e7e2315
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/lshr-reg.ll
@@ -0,0 +1 @@
+%next_op1 = lshr i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/mul-imm-2.ll b/ir-perf/snippets/arithmetic/mul-imm-2.ll
new file mode 100644
index 0000000..ac3896d
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/mul-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = mul i64 %op1, 42
+%next_op1 = mul i64 %temp1, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/mul-imm-4.ll b/ir-perf/snippets/arithmetic/mul-imm-4.ll
new file mode 100644
index 0000000..bc17ca5
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/mul-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = mul i64 %op1, 42
+%temp2 = mul i64 %temp1, 43
+%temp3 = mul i64 %temp2, 44
+%next_op1 = mul i64 %temp3, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/mul-imm.ll b/ir-perf/snippets/arithmetic/mul-imm.ll
new file mode 100644
index 0000000..0ee3be3
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/mul-imm.ll
@@ -0,0 +1 @@
+%next_op1 = mul i64 %op1, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/mul-reg-2.ll b/ir-perf/snippets/arithmetic/mul-reg-2.ll
new file mode 100644
index 0000000..3f01ac7
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/mul-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = mul i64 %op1, %op1
+%next_op1 = mul i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/mul-reg-4.ll b/ir-perf/snippets/arithmetic/mul-reg-4.ll
new file mode 100644
index 0000000..0ee384f
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/mul-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = mul i64 %op1, %op1
+%temp2 = mul i64 %temp1, %temp1
+%temp3 = mul i64 %temp2, %temp2
+%next_op1 = mul i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/mul-reg.ll b/ir-perf/snippets/arithmetic/mul-reg.ll
new file mode 100644
index 0000000..a37648b
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/mul-reg.ll
@@ -0,0 +1 @@
+%next_op1 = mul i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/or-imm-2.ll b/ir-perf/snippets/arithmetic/or-imm-2.ll
new file mode 100644
index 0000000..c66f288
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/or-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = or i64 %op1, 42
+%next_op1 = or i64 %temp1, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/or-imm-4.ll b/ir-perf/snippets/arithmetic/or-imm-4.ll
new file mode 100644
index 0000000..7d003cd
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/or-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = or i64 %op1, 42
+%temp2 = or i64 %temp1, 43
+%temp3 = or i64 %temp2, 44
+%next_op1 = or i64 %temp3, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/or-imm.ll b/ir-perf/snippets/arithmetic/or-imm.ll
new file mode 100644
index 0000000..d6ea0ad
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/or-imm.ll
@@ -0,0 +1 @@
+%next_op1 = or i64 %op1, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/or-reg-2.ll b/ir-perf/snippets/arithmetic/or-reg-2.ll
new file mode 100644
index 0000000..e9ab4dc
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/or-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = or i64 %op1, %op1
+%next_op1 = or i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/or-reg-4.ll b/ir-perf/snippets/arithmetic/or-reg-4.ll
new file mode 100644
index 0000000..e6a1fd4
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/or-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = or i64 %op1, %op1
+%temp2 = or i64 %temp1, %temp1
+%temp3 = or i64 %temp2, %temp2
+%next_op1 = or i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/or-reg.ll b/ir-perf/snippets/arithmetic/or-reg.ll
new file mode 100644
index 0000000..7cdcb8c
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/or-reg.ll
@@ -0,0 +1 @@
+%next_op1 = or i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sdiv-imm-2.ll b/ir-perf/snippets/arithmetic/sdiv-imm-2.ll
new file mode 100644
index 0000000..4a6c510
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sdiv-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = sdiv i64 %op1, 42
+%next_op1 = sdiv i64 %temp1, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sdiv-imm-4.ll b/ir-perf/snippets/arithmetic/sdiv-imm-4.ll
new file mode 100644
index 0000000..dc96282
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sdiv-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = sdiv i64 %op1, 42
+%temp2 = sdiv i64 %temp1, 43
+%temp3 = sdiv i64 %temp2, 44
+%next_op1 = sdiv i64 %temp3, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sdiv-imm.ll b/ir-perf/snippets/arithmetic/sdiv-imm.ll
new file mode 100644
index 0000000..ba013f4
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sdiv-imm.ll
@@ -0,0 +1 @@
+%next_op1 = sdiv i64 %op1, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sdiv-reg-2.ll b/ir-perf/snippets/arithmetic/sdiv-reg-2.ll
new file mode 100644
index 0000000..0333f58
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sdiv-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = sdiv i64 %op1, %op1
+%next_op1 = sdiv i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sdiv-reg-4.ll b/ir-perf/snippets/arithmetic/sdiv-reg-4.ll
new file mode 100644
index 0000000..269e163
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sdiv-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = sdiv i64 %op1, %op1
+%temp2 = sdiv i64 %temp1, %temp1
+%temp3 = sdiv i64 %temp2, %temp2
+%next_op1 = sdiv i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sdiv-reg.ll b/ir-perf/snippets/arithmetic/sdiv-reg.ll
new file mode 100644
index 0000000..d7799bd
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sdiv-reg.ll
@@ -0,0 +1 @@
+%next_op1 = sdiv i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/shl-imm-2.ll b/ir-perf/snippets/arithmetic/shl-imm-2.ll
new file mode 100644
index 0000000..e9c07c9
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/shl-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = shl i64 %op1, 5
+%next_op1 = shl i64 %temp1, 3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/shl-imm-4.ll b/ir-perf/snippets/arithmetic/shl-imm-4.ll
new file mode 100644
index 0000000..e2216fb
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/shl-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = shl i64 %op1, 5
+%temp2 = shl i64 %temp1, 3
+%temp3 = shl i64 %temp2, 2
+%next_op1 = shl i64 %temp3, 1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/shl-imm.ll b/ir-perf/snippets/arithmetic/shl-imm.ll
new file mode 100644
index 0000000..2345a85
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/shl-imm.ll
@@ -0,0 +1 @@
+%next_op1 = shl i64 %op1, 5 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/shl-reg-2.ll b/ir-perf/snippets/arithmetic/shl-reg-2.ll
new file mode 100644
index 0000000..25ab7be
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/shl-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = shl i64 %op1, %op1
+%next_op1 = shl i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/shl-reg-4.ll b/ir-perf/snippets/arithmetic/shl-reg-4.ll
new file mode 100644
index 0000000..d49652d
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/shl-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = shl i64 %op1, %op1
+%temp2 = shl i64 %temp1, %temp1
+%temp3 = shl i64 %temp2, %temp2
+%next_op1 = shl i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/shl-reg.ll b/ir-perf/snippets/arithmetic/shl-reg.ll
new file mode 100644
index 0000000..9998297
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/shl-reg.ll
@@ -0,0 +1 @@
+%next_op1 = shl i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/srem-imm-2.ll b/ir-perf/snippets/arithmetic/srem-imm-2.ll
new file mode 100644
index 0000000..fa94505
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/srem-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = srem i64 %op1, 42
+%next_op1 = srem i64 %temp1, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/srem-imm-4.ll b/ir-perf/snippets/arithmetic/srem-imm-4.ll
new file mode 100644
index 0000000..533be5a
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/srem-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = srem i64 %op1, 42
+%temp2 = srem i64 %temp1, 43
+%temp3 = srem i64 %temp2, 44
+%next_op1 = srem i64 %temp3, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/srem-imm.ll b/ir-perf/snippets/arithmetic/srem-imm.ll
new file mode 100644
index 0000000..66c66fe
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/srem-imm.ll
@@ -0,0 +1 @@
+%next_op1 = srem i64 %op1, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/srem-reg-2.ll b/ir-perf/snippets/arithmetic/srem-reg-2.ll
new file mode 100644
index 0000000..e97584c
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/srem-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = srem i64 %op1, %op1
+%next_op1 = srem i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/srem-reg-4.ll b/ir-perf/snippets/arithmetic/srem-reg-4.ll
new file mode 100644
index 0000000..4422ce7
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/srem-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = srem i64 %op1, %op1
+%temp2 = srem i64 %temp1, %temp1
+%temp3 = srem i64 %temp2, %temp2
+%next_op1 = srem i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/srem-reg.ll b/ir-perf/snippets/arithmetic/srem-reg.ll
new file mode 100644
index 0000000..d5ef93b
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/srem-reg.ll
@@ -0,0 +1 @@
+%next_op1 = srem i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sub-imm-2.ll b/ir-perf/snippets/arithmetic/sub-imm-2.ll
new file mode 100644
index 0000000..eb62fa8
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sub-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = sub i64 %op1, 42
+%next_op1 = sub i64 %temp1, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sub-imm-4.ll b/ir-perf/snippets/arithmetic/sub-imm-4.ll
new file mode 100644
index 0000000..3742dca
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sub-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = sub i64 %op1, 42
+%temp2 = sub i64 %temp1, 43
+%temp3 = sub i64 %temp2, 44
+%next_op1 = sub i64 %temp3, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sub-imm.ll b/ir-perf/snippets/arithmetic/sub-imm.ll
new file mode 100644
index 0000000..83dd995
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sub-imm.ll
@@ -0,0 +1 @@
+%next_op1 = sub i64 %op1, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sub-reg-2.ll b/ir-perf/snippets/arithmetic/sub-reg-2.ll
new file mode 100644
index 0000000..58cf731
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sub-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = sub i64 %op1, %op1
+%next_op1 = sub i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sub-reg-4.ll b/ir-perf/snippets/arithmetic/sub-reg-4.ll
new file mode 100644
index 0000000..ca4f4cd
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sub-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = sub i64 %op1, %op1
+%temp2 = sub i64 %temp1, %temp1
+%temp3 = sub i64 %temp2, %temp2
+%next_op1 = sub i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/sub-reg.ll b/ir-perf/snippets/arithmetic/sub-reg.ll
new file mode 100644
index 0000000..6243840
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/sub-reg.ll
@@ -0,0 +1 @@
+%next_op1 = sub i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/udiv-imm-2.ll b/ir-perf/snippets/arithmetic/udiv-imm-2.ll
new file mode 100644
index 0000000..5f57a50
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/udiv-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = udiv i64 %op1, 42
+%next_op1 = udiv i64 %temp1, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/udiv-imm-4.ll b/ir-perf/snippets/arithmetic/udiv-imm-4.ll
new file mode 100644
index 0000000..7bfa8d2
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/udiv-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = udiv i64 %op1, 42
+%temp2 = udiv i64 %temp1, 43
+%temp3 = udiv i64 %temp2, 44
+%next_op1 = udiv i64 %temp3, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/udiv-imm.ll b/ir-perf/snippets/arithmetic/udiv-imm.ll
new file mode 100644
index 0000000..21fefb2
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/udiv-imm.ll
@@ -0,0 +1 @@
+%next_op1 = udiv i64 %op1, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/udiv-reg-2.ll b/ir-perf/snippets/arithmetic/udiv-reg-2.ll
new file mode 100644
index 0000000..1b4d100
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/udiv-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = udiv i64 %op1, %op1
+%next_op1 = udiv i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/udiv-reg-4.ll b/ir-perf/snippets/arithmetic/udiv-reg-4.ll
new file mode 100644
index 0000000..47b0a4b
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/udiv-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = udiv i64 %op1, %op1
+%temp2 = udiv i64 %temp1, %temp1
+%temp3 = udiv i64 %temp2, %temp2
+%next_op1 = udiv i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/udiv-reg.ll b/ir-perf/snippets/arithmetic/udiv-reg.ll
new file mode 100644
index 0000000..97cf4a9
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/udiv-reg.ll
@@ -0,0 +1 @@
+%next_op1 = udiv i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/urem-imm-2.ll b/ir-perf/snippets/arithmetic/urem-imm-2.ll
new file mode 100644
index 0000000..a20e58a
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/urem-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = urem i64 %op1, 42
+%next_op1 = urem i64 %temp1, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/urem-imm-4.ll b/ir-perf/snippets/arithmetic/urem-imm-4.ll
new file mode 100644
index 0000000..161d62a
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/urem-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = urem i64 %op1, 42
+%temp2 = urem i64 %temp1, 43
+%temp3 = urem i64 %temp2, 44
+%next_op1 = urem i64 %temp3, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/urem-imm.ll b/ir-perf/snippets/arithmetic/urem-imm.ll
new file mode 100644
index 0000000..2e319cf
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/urem-imm.ll
@@ -0,0 +1 @@
+%next_op1 = urem i64 %op1, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/urem-reg-2.ll b/ir-perf/snippets/arithmetic/urem-reg-2.ll
new file mode 100644
index 0000000..97175f4
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/urem-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = urem i64 %op1, %op1
+%next_op1 = urem i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/urem-reg-4.ll b/ir-perf/snippets/arithmetic/urem-reg-4.ll
new file mode 100644
index 0000000..37fa768
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/urem-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = urem i64 %op1, %op1
+%temp2 = urem i64 %temp1, %temp1
+%temp3 = urem i64 %temp2, %temp2
+%next_op1 = urem i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/urem-reg.ll b/ir-perf/snippets/arithmetic/urem-reg.ll
new file mode 100644
index 0000000..129ab56
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/urem-reg.ll
@@ -0,0 +1 @@
+%next_op1 = urem i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/xor-imm-2.ll b/ir-perf/snippets/arithmetic/xor-imm-2.ll
new file mode 100644
index 0000000..ee5859d
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/xor-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = xor i64 %op1, 42
+%next_op1 = xor i64 %temp1, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/xor-imm-4.ll b/ir-perf/snippets/arithmetic/xor-imm-4.ll
new file mode 100644
index 0000000..9d7f931
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/xor-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = xor i64 %op1, 42
+%temp2 = xor i64 %temp1, 43
+%temp3 = xor i64 %temp2, 44
+%next_op1 = xor i64 %temp3, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/xor-imm.ll b/ir-perf/snippets/arithmetic/xor-imm.ll
new file mode 100644
index 0000000..6401d4a
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/xor-imm.ll
@@ -0,0 +1 @@
+%next_op1 = xor i64 %op1, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/xor-reg-2.ll b/ir-perf/snippets/arithmetic/xor-reg-2.ll
new file mode 100644
index 0000000..b246d7a
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/xor-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = xor i64 %op1, %op1
+%next_op1 = xor i64 %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/xor-reg-4.ll b/ir-perf/snippets/arithmetic/xor-reg-4.ll
new file mode 100644
index 0000000..3b267c1
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/xor-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = xor i64 %op1, %op1
+%temp2 = xor i64 %temp1, %temp1
+%temp3 = xor i64 %temp2, %temp2
+%next_op1 = xor i64 %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/arithmetic/xor-reg.ll b/ir-perf/snippets/arithmetic/xor-reg.ll
new file mode 100644
index 0000000..c9e3455
--- /dev/null
+++ b/ir-perf/snippets/arithmetic/xor-reg.ll
@@ -0,0 +1 @@
+%next_op1 = xor i64 %op1, %op1 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/bitcast-2.ll b/ir-perf/snippets/conversion/bitcast-2.ll
new file mode 100644
index 0000000..98f29ab
--- /dev/null
+++ b/ir-perf/snippets/conversion/bitcast-2.ll
@@ -0,0 +1,2 @@
+%temp1 = bitcast i64 %i to double
+%next_acc = bitcast i64 %i to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/bitcast.ll b/ir-perf/snippets/conversion/bitcast.ll
new file mode 100644
index 0000000..5dda5e7
--- /dev/null
+++ b/ir-perf/snippets/conversion/bitcast.ll
@@ -0,0 +1,2 @@
+%conv_result = bitcast i64 %i to double
+%next_acc = fadd double %conv_result, 0.0 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fcmp-imm-2.ll b/ir-perf/snippets/conversion/fcmp-imm-2.ll
new file mode 100644
index 0000000..dde6d66
--- /dev/null
+++ b/ir-perf/snippets/conversion/fcmp-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fcmp olt double %acc, 1.5
+%next_acc = fcmp olt double %acc, 2.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fcmp-imm-4.ll b/ir-perf/snippets/conversion/fcmp-imm-4.ll
new file mode 100644
index 0000000..9b84532
--- /dev/null
+++ b/ir-perf/snippets/conversion/fcmp-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fcmp olt double %acc, 1.5
+%temp2 = fcmp olt double %acc, 2.5
+%temp3 = fcmp olt double %acc, 3.5
+%next_acc = fcmp olt double %acc, 4.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fcmp-imm.ll b/ir-perf/snippets/conversion/fcmp-imm.ll
new file mode 100644
index 0000000..48f70ae
--- /dev/null
+++ b/ir-perf/snippets/conversion/fcmp-imm.ll
@@ -0,0 +1 @@
+%next_acc = fcmp olt double %acc, 1.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fcmp-reg-2.ll b/ir-perf/snippets/conversion/fcmp-reg-2.ll
new file mode 100644
index 0000000..0b9aeb4
--- /dev/null
+++ b/ir-perf/snippets/conversion/fcmp-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fcmp olt double %acc, %acc
+%next_acc = fcmp olt double %acc, %acc 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fcmp-reg-4.ll b/ir-perf/snippets/conversion/fcmp-reg-4.ll
new file mode 100644
index 0000000..f4a08fc
--- /dev/null
+++ b/ir-perf/snippets/conversion/fcmp-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fcmp olt double %acc, %acc
+%temp2 = fcmp olt double %acc, %acc
+%temp3 = fcmp olt double %acc, %acc
+%next_acc = fcmp olt double %acc, %acc 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fcmp-reg.ll b/ir-perf/snippets/conversion/fcmp-reg.ll
new file mode 100644
index 0000000..c5cfeef
--- /dev/null
+++ b/ir-perf/snippets/conversion/fcmp-reg.ll
@@ -0,0 +1 @@
+%next_acc = fcmp olt double %acc, %acc 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fpext-2.ll b/ir-perf/snippets/conversion/fpext-2.ll
new file mode 100644
index 0000000..7d8fbb0
--- /dev/null
+++ b/ir-perf/snippets/conversion/fpext-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fpext float %acc2 to double
+%next_acc = fpext float %acc2 to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fpext-4.ll b/ir-perf/snippets/conversion/fpext-4.ll
new file mode 100644
index 0000000..8bde165
--- /dev/null
+++ b/ir-perf/snippets/conversion/fpext-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fpext float %acc2 to double
+%temp2 = fpext float %acc2 to double
+%temp3 = fpext float %acc2 to double
+%next_acc = fpext float %acc2 to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fpext.ll b/ir-perf/snippets/conversion/fpext.ll
new file mode 100644
index 0000000..4c8bdab
--- /dev/null
+++ b/ir-perf/snippets/conversion/fpext.ll
@@ -0,0 +1,2 @@
+%conv_result = fpext float %acc2 to double
+%next_acc = fadd double %conv_result, 0.0 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fptosi-2.ll b/ir-perf/snippets/conversion/fptosi-2.ll
new file mode 100644
index 0000000..7e83536
--- /dev/null
+++ b/ir-perf/snippets/conversion/fptosi-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fptosi double %acc to i32
+%next_acc = fptosi double %acc to i32 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fptosi-4.ll b/ir-perf/snippets/conversion/fptosi-4.ll
new file mode 100644
index 0000000..9ffa087
--- /dev/null
+++ b/ir-perf/snippets/conversion/fptosi-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fptosi double %acc to i32
+%temp2 = fptosi double %acc to i32
+%temp3 = fptosi double %acc to i32
+%next_acc = fptosi double %acc to i32 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fptosi.ll b/ir-perf/snippets/conversion/fptosi.ll
new file mode 100644
index 0000000..e7c5a47
--- /dev/null
+++ b/ir-perf/snippets/conversion/fptosi.ll
@@ -0,0 +1,2 @@
+%conv_result = fptosi double %acc to i32
+%next_acc = sitofp i32 %conv_result to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fptoui-2.ll b/ir-perf/snippets/conversion/fptoui-2.ll
new file mode 100644
index 0000000..60a622c
--- /dev/null
+++ b/ir-perf/snippets/conversion/fptoui-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fptoui double %acc to i32
+%next_acc = fptoui double %acc to i32 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fptoui-4.ll b/ir-perf/snippets/conversion/fptoui-4.ll
new file mode 100644
index 0000000..d2ef555
--- /dev/null
+++ b/ir-perf/snippets/conversion/fptoui-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fptoui double %acc to i32
+%temp2 = fptoui double %acc to i32
+%temp3 = fptoui double %acc to i32
+%next_acc = fptoui double %acc to i32 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fptoui.ll b/ir-perf/snippets/conversion/fptoui.ll
new file mode 100644
index 0000000..dc68b66
--- /dev/null
+++ b/ir-perf/snippets/conversion/fptoui.ll
@@ -0,0 +1,2 @@
+%conv_result = fptoui double %acc to i32
+%next_acc = sitofp i32 %conv_result to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fptrunc-2.ll b/ir-perf/snippets/conversion/fptrunc-2.ll
new file mode 100644
index 0000000..9ea07e3
--- /dev/null
+++ b/ir-perf/snippets/conversion/fptrunc-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fptrunc double %acc to float
+%next_acc = fptrunc double %acc to float 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fptrunc-4.ll b/ir-perf/snippets/conversion/fptrunc-4.ll
new file mode 100644
index 0000000..85bac7c
--- /dev/null
+++ b/ir-perf/snippets/conversion/fptrunc-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fptrunc double %acc to float
+%temp2 = fptrunc double %acc to float
+%temp3 = fptrunc double %acc to float
+%next_acc = fptrunc double %acc to float 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/fptrunc.ll b/ir-perf/snippets/conversion/fptrunc.ll
new file mode 100644
index 0000000..dea8b03
--- /dev/null
+++ b/ir-perf/snippets/conversion/fptrunc.ll
@@ -0,0 +1,2 @@
+%conv_result = fptrunc double %acc to float
+%next_acc = fpext float %conv_result to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/icmp-imm-2.ll b/ir-perf/snippets/conversion/icmp-imm-2.ll
new file mode 100644
index 0000000..e8e2164
--- /dev/null
+++ b/ir-perf/snippets/conversion/icmp-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = icmp slt i64 %i, 42
+%next_op1 = icmp slt i64 %i, 43 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/icmp-imm-4.ll b/ir-perf/snippets/conversion/icmp-imm-4.ll
new file mode 100644
index 0000000..1e311f9
--- /dev/null
+++ b/ir-perf/snippets/conversion/icmp-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = icmp slt i64 %i, 42
+%temp2 = icmp slt i64 %i, 43
+%temp3 = icmp slt i64 %i, 44
+%next_op1 = icmp slt i64 %i, 45 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/icmp-imm.ll b/ir-perf/snippets/conversion/icmp-imm.ll
new file mode 100644
index 0000000..bea63e4
--- /dev/null
+++ b/ir-perf/snippets/conversion/icmp-imm.ll
@@ -0,0 +1 @@
+%next_op1 = icmp slt i64 %i, 42 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/icmp-reg-2.ll b/ir-perf/snippets/conversion/icmp-reg-2.ll
new file mode 100644
index 0000000..87b965b
--- /dev/null
+++ b/ir-perf/snippets/conversion/icmp-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = icmp slt i64 %i, %i
+%next_op1 = icmp slt i64 %i, %i 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/icmp-reg-4.ll b/ir-perf/snippets/conversion/icmp-reg-4.ll
new file mode 100644
index 0000000..c0e886e
--- /dev/null
+++ b/ir-perf/snippets/conversion/icmp-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = icmp slt i64 %i, %i
+%temp2 = icmp slt i64 %i, %i
+%temp3 = icmp slt i64 %i, %i
+%next_op1 = icmp slt i64 %i, %i 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/icmp-reg.ll b/ir-perf/snippets/conversion/icmp-reg.ll
new file mode 100644
index 0000000..3f7cb1c
--- /dev/null
+++ b/ir-perf/snippets/conversion/icmp-reg.ll
@@ -0,0 +1 @@
+%next_op1 = icmp slt i64 %i, %i 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/inttoptr-2.ll b/ir-perf/snippets/conversion/inttoptr-2.ll
new file mode 100644
index 0000000..d94fa43
--- /dev/null
+++ b/ir-perf/snippets/conversion/inttoptr-2.ll
@@ -0,0 +1,2 @@
+%temp1 = inttoptr i64 %i to i8*
+%next_acc = inttoptr i64 %i to i8* 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/inttoptr-4.ll b/ir-perf/snippets/conversion/inttoptr-4.ll
new file mode 100644
index 0000000..7d22c45
--- /dev/null
+++ b/ir-perf/snippets/conversion/inttoptr-4.ll
@@ -0,0 +1,4 @@
+%temp1 = inttoptr i64 %i to i8*
+%temp2 = inttoptr i64 %i to i8*
+%temp3 = inttoptr i64 %i to i8*
+%next_acc = inttoptr i64 %i to i8* 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/inttoptr.ll b/ir-perf/snippets/conversion/inttoptr.ll
new file mode 100644
index 0000000..798e8a8
--- /dev/null
+++ b/ir-perf/snippets/conversion/inttoptr.ll
@@ -0,0 +1 @@
+%next_acc = inttoptr i64 %i to i8* 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/ptrtoint-2.ll b/ir-perf/snippets/conversion/ptrtoint-2.ll
new file mode 100644
index 0000000..11eddd6
--- /dev/null
+++ b/ir-perf/snippets/conversion/ptrtoint-2.ll
@@ -0,0 +1,2 @@
+%temp1 = ptrtoint i8* %ptr to i64
+%next_acc = ptrtoint i8* %ptr to i64 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/ptrtoint-4.ll b/ir-perf/snippets/conversion/ptrtoint-4.ll
new file mode 100644
index 0000000..e8761fe
--- /dev/null
+++ b/ir-perf/snippets/conversion/ptrtoint-4.ll
@@ -0,0 +1,4 @@
+%temp1 = ptrtoint i8* %ptr to i64
+%temp2 = ptrtoint i8* %ptr to i64
+%temp3 = ptrtoint i8* %ptr to i64
+%next_acc = ptrtoint i8* %ptr to i64 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/ptrtoint.ll b/ir-perf/snippets/conversion/ptrtoint.ll
new file mode 100644
index 0000000..24bd0af
--- /dev/null
+++ b/ir-perf/snippets/conversion/ptrtoint.ll
@@ -0,0 +1,2 @@
+%conv_result = ptrtoint i8* %ptr to i64
+%next_acc = sitofp i64 %conv_result to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/sext-2.ll b/ir-perf/snippets/conversion/sext-2.ll
new file mode 100644
index 0000000..d98280e
--- /dev/null
+++ b/ir-perf/snippets/conversion/sext-2.ll
@@ -0,0 +1,2 @@
+%temp1 = sext i32 %op to i64
+%next_acc = sext i32 %op to i64 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/sext-4.ll b/ir-perf/snippets/conversion/sext-4.ll
new file mode 100644
index 0000000..263f5f6
--- /dev/null
+++ b/ir-perf/snippets/conversion/sext-4.ll
@@ -0,0 +1,4 @@
+%temp1 = sext i32 %op to i64
+%temp2 = sext i32 %op to i64
+%temp3 = sext i32 %op to i64
+%next_acc = sext i32 %op to i64 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/sext.ll b/ir-perf/snippets/conversion/sext.ll
new file mode 100644
index 0000000..d79a708
--- /dev/null
+++ b/ir-perf/snippets/conversion/sext.ll
@@ -0,0 +1,2 @@
+%conv_result = sext i32 %op to i64
+%next_acc = sitofp i64 %conv_result to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/sitofp-2.ll b/ir-perf/snippets/conversion/sitofp-2.ll
new file mode 100644
index 0000000..d14cabe
--- /dev/null
+++ b/ir-perf/snippets/conversion/sitofp-2.ll
@@ -0,0 +1,2 @@
+%temp1 = sitofp i32 %op to double
+%next_acc = sitofp i32 %op to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/sitofp-4.ll b/ir-perf/snippets/conversion/sitofp-4.ll
new file mode 100644
index 0000000..174cddc
--- /dev/null
+++ b/ir-perf/snippets/conversion/sitofp-4.ll
@@ -0,0 +1,4 @@
+%temp1 = sitofp i32 %op to double
+%temp2 = sitofp i32 %op to double
+%temp3 = sitofp i32 %op to double
+%next_acc = sitofp i32 %op to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/sitofp.ll b/ir-perf/snippets/conversion/sitofp.ll
new file mode 100644
index 0000000..fc0cc19
--- /dev/null
+++ b/ir-perf/snippets/conversion/sitofp.ll
@@ -0,0 +1,2 @@
+%conv_result = sitofp i32 %op to double
+%next_acc = fadd double %conv_result, 0.0 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/trunc-2.ll b/ir-perf/snippets/conversion/trunc-2.ll
new file mode 100644
index 0000000..b462ee1
--- /dev/null
+++ b/ir-perf/snippets/conversion/trunc-2.ll
@@ -0,0 +1,2 @@
+%temp1 = trunc i64 %i to i32
+%next_acc = trunc i64 %i to i32 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/trunc-4.ll b/ir-perf/snippets/conversion/trunc-4.ll
new file mode 100644
index 0000000..5cd0c95
--- /dev/null
+++ b/ir-perf/snippets/conversion/trunc-4.ll
@@ -0,0 +1,4 @@
+%temp1 = trunc i64 %i to i32
+%temp2 = trunc i64 %i to i32
+%temp3 = trunc i64 %i to i32
+%next_acc = trunc i64 %i to i32 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/trunc.ll b/ir-perf/snippets/conversion/trunc.ll
new file mode 100644
index 0000000..f5ce9c5
--- /dev/null
+++ b/ir-perf/snippets/conversion/trunc.ll
@@ -0,0 +1,2 @@
+%conv_result = trunc i64 %i to i32
+%next_acc = sitofp i32 %conv_result to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/uitofp-2.ll b/ir-perf/snippets/conversion/uitofp-2.ll
new file mode 100644
index 0000000..0a78e53
--- /dev/null
+++ b/ir-perf/snippets/conversion/uitofp-2.ll
@@ -0,0 +1,2 @@
+%temp1 = uitofp i32 %op to double
+%next_acc = uitofp i32 %op to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/uitofp-4.ll b/ir-perf/snippets/conversion/uitofp-4.ll
new file mode 100644
index 0000000..d5f0450
--- /dev/null
+++ b/ir-perf/snippets/conversion/uitofp-4.ll
@@ -0,0 +1,4 @@
+%temp1 = uitofp i32 %op to double
+%temp2 = uitofp i32 %op to double
+%temp3 = uitofp i32 %op to double
+%next_acc = uitofp i32 %op to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/uitofp.ll b/ir-perf/snippets/conversion/uitofp.ll
new file mode 100644
index 0000000..f28af39
--- /dev/null
+++ b/ir-perf/snippets/conversion/uitofp.ll
@@ -0,0 +1,2 @@
+%conv_result = uitofp i32 %op to double
+%next_acc = fadd double %conv_result, 0.0 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/zext-2.ll b/ir-perf/snippets/conversion/zext-2.ll
new file mode 100644
index 0000000..2d64f47
--- /dev/null
+++ b/ir-perf/snippets/conversion/zext-2.ll
@@ -0,0 +1,3 @@
+%temp1 = zext i32 %op to i64
+%conv_result = zext i32 %op to i64
+%next_acc = sitofp i64 %conv_result to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/zext-4.ll b/ir-perf/snippets/conversion/zext-4.ll
new file mode 100644
index 0000000..8e94c97
--- /dev/null
+++ b/ir-perf/snippets/conversion/zext-4.ll
@@ -0,0 +1,5 @@
+%temp1 = zext i32 %op to i64
+%temp2 = zext i32 %op to i64
+%temp3 = zext i32 %op to i64
+%conv_result = zext i32 %op to i64
+%next_acc = sitofp i64 %conv_result to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/conversion/zext.ll b/ir-perf/snippets/conversion/zext.ll
new file mode 100644
index 0000000..35122ef
--- /dev/null
+++ b/ir-perf/snippets/conversion/zext.ll
@@ -0,0 +1,2 @@
+%conv_result = zext i32 %op to i64
+%next_acc = sitofp i64 %conv_result to double 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fadd-imm-2.ll b/ir-perf/snippets/fp-arithmetic/fadd-imm-2.ll
new file mode 100644
index 0000000..4aa3aca
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fadd-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fadd double %acc, 1.5
+%next_acc = fadd double %temp1, 2.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fadd-imm-4.ll b/ir-perf/snippets/fp-arithmetic/fadd-imm-4.ll
new file mode 100644
index 0000000..150986c
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fadd-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fadd double %acc, 1.5
+%temp2 = fadd double %temp1, 2.5
+%temp3 = fadd double %temp2, 3.5
+%next_acc = fadd double %temp3, 4.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fadd-imm.ll b/ir-perf/snippets/fp-arithmetic/fadd-imm.ll
new file mode 100644
index 0000000..ea748c8
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fadd-imm.ll
@@ -0,0 +1 @@
+%next_acc = fadd double %acc, 1.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fadd-reg-2.ll b/ir-perf/snippets/fp-arithmetic/fadd-reg-2.ll
new file mode 100644
index 0000000..68da698
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fadd-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fadd double %acc, %acc
+%next_acc = fadd double %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fadd-reg-4.ll b/ir-perf/snippets/fp-arithmetic/fadd-reg-4.ll
new file mode 100644
index 0000000..68c8ba9
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fadd-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fadd double %acc, %acc
+%temp2 = fadd double %temp1, %temp1
+%temp3 = fadd double %temp2, %temp2
+%next_acc = fadd double %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fadd-reg.ll b/ir-perf/snippets/fp-arithmetic/fadd-reg.ll
new file mode 100644
index 0000000..7133062
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fadd-reg.ll
@@ -0,0 +1 @@
+%next_acc = fadd double %acc, %acc 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fdiv-imm-2.ll b/ir-perf/snippets/fp-arithmetic/fdiv-imm-2.ll
new file mode 100644
index 0000000..85fc4e0
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fdiv-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fdiv double %acc, 1.5
+%next_acc = fdiv double %temp1, 2.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fdiv-imm-4.ll b/ir-perf/snippets/fp-arithmetic/fdiv-imm-4.ll
new file mode 100644
index 0000000..fc4d767
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fdiv-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fdiv double %acc, 1.5
+%temp2 = fdiv double %temp1, 2.5
+%temp3 = fdiv double %temp2, 3.5
+%next_acc = fdiv double %temp3, 4.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fdiv-imm.ll b/ir-perf/snippets/fp-arithmetic/fdiv-imm.ll
new file mode 100644
index 0000000..17062a5
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fdiv-imm.ll
@@ -0,0 +1 @@
+%next_acc = fdiv double %acc, 1.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fdiv-reg-2.ll b/ir-perf/snippets/fp-arithmetic/fdiv-reg-2.ll
new file mode 100644
index 0000000..ea51812
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fdiv-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fdiv double %acc, %acc
+%next_acc = fdiv double %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fdiv-reg-4.ll b/ir-perf/snippets/fp-arithmetic/fdiv-reg-4.ll
new file mode 100644
index 0000000..d66bf71
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fdiv-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fdiv double %acc, %acc
+%temp2 = fdiv double %temp1, %temp1
+%temp3 = fdiv double %temp2, %temp2
+%next_acc = fdiv double %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fdiv-reg.ll b/ir-perf/snippets/fp-arithmetic/fdiv-reg.ll
new file mode 100644
index 0000000..85cc7d9
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fdiv-reg.ll
@@ -0,0 +1 @@
+%next_acc = fdiv double %acc, %acc 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fmul-imm-2.ll b/ir-perf/snippets/fp-arithmetic/fmul-imm-2.ll
new file mode 100644
index 0000000..1b5f79b
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fmul-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fmul double %acc, 1.5
+%next_acc = fmul double %temp1, 2.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fmul-imm-4.ll b/ir-perf/snippets/fp-arithmetic/fmul-imm-4.ll
new file mode 100644
index 0000000..17719c1
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fmul-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fmul double %acc, 1.5
+%temp2 = fmul double %temp1, 2.5
+%temp3 = fmul double %temp2, 3.5
+%next_acc = fmul double %temp3, 4.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fmul-imm.ll b/ir-perf/snippets/fp-arithmetic/fmul-imm.ll
new file mode 100644
index 0000000..5f683ab
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fmul-imm.ll
@@ -0,0 +1 @@
+%next_acc = fmul double %acc, 1.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fmul-reg-2.ll b/ir-perf/snippets/fp-arithmetic/fmul-reg-2.ll
new file mode 100644
index 0000000..d152111
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fmul-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fmul double %acc, %acc
+%next_acc = fmul double %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fmul-reg-4.ll b/ir-perf/snippets/fp-arithmetic/fmul-reg-4.ll
new file mode 100644
index 0000000..86c916c
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fmul-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fmul double %acc, %acc
+%temp2 = fmul double %temp1, %temp1
+%temp3 = fmul double %temp2, %temp2
+%next_acc = fmul double %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fmul-reg.ll b/ir-perf/snippets/fp-arithmetic/fmul-reg.ll
new file mode 100644
index 0000000..4d5aabb
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fmul-reg.ll
@@ -0,0 +1 @@
+%next_acc = fmul double %acc, %acc 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fneg-2.ll b/ir-perf/snippets/fp-arithmetic/fneg-2.ll
new file mode 100644
index 0000000..618373d
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fneg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fneg double %acc
+%next_acc = fneg double %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fneg-4.ll b/ir-perf/snippets/fp-arithmetic/fneg-4.ll
new file mode 100644
index 0000000..3d28b04
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fneg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fneg double %acc
+%temp2 = fneg double %temp1
+%temp3 = fneg double %temp2
+%next_acc = fneg double %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fneg.ll b/ir-perf/snippets/fp-arithmetic/fneg.ll
new file mode 100644
index 0000000..25827ea
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fneg.ll
@@ -0,0 +1 @@
+%next_acc = fneg double %acc 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/frem-imm-2.ll b/ir-perf/snippets/fp-arithmetic/frem-imm-2.ll
new file mode 100644
index 0000000..c235994
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/frem-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = frem double %acc, 1.5
+%next_acc = frem double %temp1, 2.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/frem-imm-4.ll b/ir-perf/snippets/fp-arithmetic/frem-imm-4.ll
new file mode 100644
index 0000000..7028a8e
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/frem-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = frem double %acc, 1.5
+%temp2 = frem double %temp1, 2.5
+%temp3 = frem double %temp2, 3.5
+%next_acc = frem double %temp3, 4.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/frem-imm.ll b/ir-perf/snippets/fp-arithmetic/frem-imm.ll
new file mode 100644
index 0000000..2fbb841
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/frem-imm.ll
@@ -0,0 +1 @@
+%next_acc = frem double %acc, 1.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/frem-reg-2.ll b/ir-perf/snippets/fp-arithmetic/frem-reg-2.ll
new file mode 100644
index 0000000..c2cfa16
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/frem-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = frem double %acc, %acc
+%next_acc = frem double %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/frem-reg-4.ll b/ir-perf/snippets/fp-arithmetic/frem-reg-4.ll
new file mode 100644
index 0000000..9d3470a
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/frem-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = frem double %acc, %acc
+%temp2 = frem double %temp1, %temp1
+%temp3 = frem double %temp2, %temp2
+%next_acc = frem double %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/frem-reg.ll b/ir-perf/snippets/fp-arithmetic/frem-reg.ll
new file mode 100644
index 0000000..a6626cb
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/frem-reg.ll
@@ -0,0 +1 @@
+%next_acc = frem double %acc, %acc 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fsub-imm-2.ll b/ir-perf/snippets/fp-arithmetic/fsub-imm-2.ll
new file mode 100644
index 0000000..1859299
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fsub-imm-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fsub double %acc, 1.5
+%next_acc = fsub double %temp1, 2.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fsub-imm-4.ll b/ir-perf/snippets/fp-arithmetic/fsub-imm-4.ll
new file mode 100644
index 0000000..e8d5d44
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fsub-imm-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fsub double %acc, 1.5
+%temp2 = fsub double %temp1, 2.5
+%temp3 = fsub double %temp2, 3.5
+%next_acc = fsub double %temp3, 4.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fsub-imm.ll b/ir-perf/snippets/fp-arithmetic/fsub-imm.ll
new file mode 100644
index 0000000..3341736
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fsub-imm.ll
@@ -0,0 +1 @@
+%next_acc = fsub double %acc, 1.5 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fsub-reg-2.ll b/ir-perf/snippets/fp-arithmetic/fsub-reg-2.ll
new file mode 100644
index 0000000..3cd0855
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fsub-reg-2.ll
@@ -0,0 +1,2 @@
+%temp1 = fsub double %acc, %acc
+%next_acc = fsub double %temp1, %temp1 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fsub-reg-4.ll b/ir-perf/snippets/fp-arithmetic/fsub-reg-4.ll
new file mode 100644
index 0000000..a70f769
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fsub-reg-4.ll
@@ -0,0 +1,4 @@
+%temp1 = fsub double %acc, %acc
+%temp2 = fsub double %temp1, %temp1
+%temp3 = fsub double %temp2, %temp2
+%next_acc = fsub double %temp3, %temp3 
\ No newline at end of file
diff --git a/ir-perf/snippets/fp-arithmetic/fsub-reg.ll b/ir-perf/snippets/fp-arithmetic/fsub-reg.ll
new file mode 100644
index 0000000..eda2316
--- /dev/null
+++ b/ir-perf/snippets/fp-arithmetic/fsub-reg.ll
@@ -0,0 +1 @@
+%next_acc = fsub double %acc, %acc 
\ No newline at end of file
diff --git a/ir-perf/snippets/memory/load.ll b/ir-perf/snippets/memory/load.ll
new file mode 100644
index 0000000..65490d0
--- /dev/null
+++ b/ir-perf/snippets/memory/load.ll
@@ -0,0 +1,2 @@
+%val = load i64, i64* %ptr
+%next_sum = add i64 %sum, %val 
\ No newline at end of file
diff --git a/ir-perf/snippets/memory/store.ll b/ir-perf/snippets/memory/store.ll
new file mode 100644
index 0000000..cc5822b
--- /dev/null
+++ b/ir-perf/snippets/memory/store.ll
@@ -0,0 +1,2 @@
+store i64 %sum, i64* %ptr
+%next_sum = add i64 %sum, 1 
\ No newline at end of file
diff --git a/ir-perf/snippets/phi/phi-simple.ll b/ir-perf/snippets/phi/phi-simple.ll
new file mode 100644
index 0000000..552ca9a
--- /dev/null
+++ b/ir-perf/snippets/phi/phi-simple.ll
@@ -0,0 +1 @@
+%next_val = phi i64 [%val, %loop], [42, %entry] 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/extractelement-imm-2.ll b/ir-perf/snippets/pointer/extractelement-imm-2.ll
new file mode 100644
index 0000000..4a8e4f8
--- /dev/null
+++ b/ir-perf/snippets/pointer/extractelement-imm-2.ll
@@ -0,0 +1,2 @@
+%elem1 = extractelement <4 x i32> %vec_val, i32 0
+%elem2 = extractelement <4 x i32> %vec_val, i32 1 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/extractelement-imm-4.ll b/ir-perf/snippets/pointer/extractelement-imm-4.ll
new file mode 100644
index 0000000..6015ab2
--- /dev/null
+++ b/ir-perf/snippets/pointer/extractelement-imm-4.ll
@@ -0,0 +1,4 @@
+%elem1 = extractelement <4 x i32> %vec_val, i32 0
+%elem2 = extractelement <4 x i32> %vec_val, i32 1
+%elem3 = extractelement <4 x i32> %vec_val, i32 2
+%elem4 = extractelement <4 x i32> %vec_val, i32 3 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/extractelement-imm.ll b/ir-perf/snippets/pointer/extractelement-imm.ll
new file mode 100644
index 0000000..05aaab9
--- /dev/null
+++ b/ir-perf/snippets/pointer/extractelement-imm.ll
@@ -0,0 +1 @@
+%elem = extractelement <4 x i32> %vec_val, i32 0 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/extractelement-reg-2.ll b/ir-perf/snippets/pointer/extractelement-reg-2.ll
new file mode 100644
index 0000000..3f63799
--- /dev/null
+++ b/ir-perf/snippets/pointer/extractelement-reg-2.ll
@@ -0,0 +1,2 @@
+%elem1 = extractelement <4 x i32> %vec_val, i64 %iv
+%elem2 = extractelement <4 x i32> %vec_val, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/extractelement-reg-4.ll b/ir-perf/snippets/pointer/extractelement-reg-4.ll
new file mode 100644
index 0000000..26c2d19
--- /dev/null
+++ b/ir-perf/snippets/pointer/extractelement-reg-4.ll
@@ -0,0 +1,4 @@
+%elem1 = extractelement <4 x i32> %vec_val, i64 %iv
+%elem2 = extractelement <4 x i32> %vec_val, i64 %iv
+%elem3 = extractelement <4 x i32> %vec_val, i64 %iv
+%elem4 = extractelement <4 x i32> %vec_val, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/extractelement-reg.ll b/ir-perf/snippets/pointer/extractelement-reg.ll
new file mode 100644
index 0000000..c62deee
--- /dev/null
+++ b/ir-perf/snippets/pointer/extractelement-reg.ll
@@ -0,0 +1 @@
+%elem = extractelement <4 x i32> %vec_val, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/extractvalue-2.ll b/ir-perf/snippets/pointer/extractvalue-2.ll
new file mode 100644
index 0000000..412e23d
--- /dev/null
+++ b/ir-perf/snippets/pointer/extractvalue-2.ll
@@ -0,0 +1,2 @@
+%field1 = extractvalue %struct.MyStruct %agg_val, 0
+%field2 = extractvalue %struct.MyStruct %agg_val, 1 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/extractvalue-4.ll b/ir-perf/snippets/pointer/extractvalue-4.ll
new file mode 100644
index 0000000..e25bef7
--- /dev/null
+++ b/ir-perf/snippets/pointer/extractvalue-4.ll
@@ -0,0 +1,4 @@
+%field1 = extractvalue %struct.MyStruct %agg_val, 0
+%field2 = extractvalue %struct.MyStruct %agg_val, 1
+%field3 = extractvalue %struct.MyStruct %agg_val, 2
+%field4 = extractvalue %struct.MyStruct %agg_val, 0 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/extractvalue.ll b/ir-perf/snippets/pointer/extractvalue.ll
new file mode 100644
index 0000000..d9f29b9
--- /dev/null
+++ b/ir-perf/snippets/pointer/extractvalue.ll
@@ -0,0 +1 @@
+%field = extractvalue %struct.MyStruct %agg_val, 0 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/getelementptr-imm-2.ll b/ir-perf/snippets/pointer/getelementptr-imm-2.ll
new file mode 100644
index 0000000..4fa812c
--- /dev/null
+++ b/ir-perf/snippets/pointer/getelementptr-imm-2.ll
@@ -0,0 +1,2 @@
+%ptr1 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv
+%ptr2 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/getelementptr-imm-4.ll b/ir-perf/snippets/pointer/getelementptr-imm-4.ll
new file mode 100644
index 0000000..e07351f
--- /dev/null
+++ b/ir-perf/snippets/pointer/getelementptr-imm-4.ll
@@ -0,0 +1,4 @@
+%ptr1 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv
+%ptr2 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv
+%ptr3 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv
+%ptr4 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/getelementptr-imm.ll b/ir-perf/snippets/pointer/getelementptr-imm.ll
new file mode 100644
index 0000000..5bc5e67
--- /dev/null
+++ b/ir-perf/snippets/pointer/getelementptr-imm.ll
@@ -0,0 +1 @@
+%ptr = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/getelementptr-reg-2.ll b/ir-perf/snippets/pointer/getelementptr-reg-2.ll
new file mode 100644
index 0000000..4fa812c
--- /dev/null
+++ b/ir-perf/snippets/pointer/getelementptr-reg-2.ll
@@ -0,0 +1,2 @@
+%ptr1 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv
+%ptr2 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/getelementptr-reg-4.ll b/ir-perf/snippets/pointer/getelementptr-reg-4.ll
new file mode 100644
index 0000000..e07351f
--- /dev/null
+++ b/ir-perf/snippets/pointer/getelementptr-reg-4.ll
@@ -0,0 +1,4 @@
+%ptr1 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv
+%ptr2 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv
+%ptr3 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv
+%ptr4 = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/getelementptr-reg.ll b/ir-perf/snippets/pointer/getelementptr-reg.ll
new file mode 100644
index 0000000..5bc5e67
--- /dev/null
+++ b/ir-perf/snippets/pointer/getelementptr-reg.ll
@@ -0,0 +1 @@
+%ptr = getelementptr [10 x i64], [10 x i64]* %base_ptr, i64 0, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/insertelement-imm-2.ll b/ir-perf/snippets/pointer/insertelement-imm-2.ll
new file mode 100644
index 0000000..ed35251
--- /dev/null
+++ b/ir-perf/snippets/pointer/insertelement-imm-2.ll
@@ -0,0 +1,2 @@
+%new_vec1 = insertelement <4 x i32> %vec_val, i32 42, i32 0
+%new_vec2 = insertelement <4 x i32> %new_vec1, i32 43, i32 1 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/insertelement-imm-4.ll b/ir-perf/snippets/pointer/insertelement-imm-4.ll
new file mode 100644
index 0000000..ba5b7ae
--- /dev/null
+++ b/ir-perf/snippets/pointer/insertelement-imm-4.ll
@@ -0,0 +1,4 @@
+%new_vec1 = insertelement <4 x i32> %vec_val, i32 42, i32 0
+%new_vec2 = insertelement <4 x i32> %new_vec1, i32 43, i32 1
+%new_vec3 = insertelement <4 x i32> %new_vec2, i32 44, i32 2
+%new_vec4 = insertelement <4 x i32> %new_vec3, i32 45, i32 3 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/insertelement-imm.ll b/ir-perf/snippets/pointer/insertelement-imm.ll
new file mode 100644
index 0000000..aab5f46
--- /dev/null
+++ b/ir-perf/snippets/pointer/insertelement-imm.ll
@@ -0,0 +1 @@
+%new_vec = insertelement <4 x i32> %vec_val, i32 42, i32 0 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/insertelement-reg-2.ll b/ir-perf/snippets/pointer/insertelement-reg-2.ll
new file mode 100644
index 0000000..b9382e6
--- /dev/null
+++ b/ir-perf/snippets/pointer/insertelement-reg-2.ll
@@ -0,0 +1,2 @@
+%new_vec1 = insertelement <4 x i32> %vec_val, i32 42, i64 %iv
+%new_vec2 = insertelement <4 x i32> %new_vec1, i32 43, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/insertelement-reg-4.ll b/ir-perf/snippets/pointer/insertelement-reg-4.ll
new file mode 100644
index 0000000..e697ed7
--- /dev/null
+++ b/ir-perf/snippets/pointer/insertelement-reg-4.ll
@@ -0,0 +1,4 @@
+%new_vec1 = insertelement <4 x i32> %vec_val, i32 42, i64 %iv
+%new_vec2 = insertelement <4 x i32> %new_vec1, i32 43, i64 %iv
+%new_vec3 = insertelement <4 x i32> %new_vec2, i32 44, i64 %iv
+%new_vec4 = insertelement <4 x i32> %new_vec3, i32 45, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/insertelement-reg.ll b/ir-perf/snippets/pointer/insertelement-reg.ll
new file mode 100644
index 0000000..c0ad26c
--- /dev/null
+++ b/ir-perf/snippets/pointer/insertelement-reg.ll
@@ -0,0 +1 @@
+%new_vec = insertelement <4 x i32> %vec_val, i32 42, i64 %iv 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/insertvalue-2.ll b/ir-perf/snippets/pointer/insertvalue-2.ll
new file mode 100644
index 0000000..e911bb1
--- /dev/null
+++ b/ir-perf/snippets/pointer/insertvalue-2.ll
@@ -0,0 +1,2 @@
+%new_agg1 = insertvalue %struct.MyStruct %agg_val, i32 42, 0
+%new_agg2 = insertvalue %struct.MyStruct %new_agg1, i64 123, 1 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/insertvalue-4.ll b/ir-perf/snippets/pointer/insertvalue-4.ll
new file mode 100644
index 0000000..7bdf4eb
--- /dev/null
+++ b/ir-perf/snippets/pointer/insertvalue-4.ll
@@ -0,0 +1,4 @@
+%new_agg1 = insertvalue %struct.MyStruct %agg_val, i32 42, 0
+%new_agg2 = insertvalue %struct.MyStruct %new_agg1, i64 123, 1
+%new_agg3 = insertvalue %struct.MyStruct %new_agg2, double 3.14, 2
+%new_agg4 = insertvalue %struct.MyStruct %new_agg3, i32 99, 0 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/insertvalue.ll b/ir-perf/snippets/pointer/insertvalue.ll
new file mode 100644
index 0000000..511dd46
--- /dev/null
+++ b/ir-perf/snippets/pointer/insertvalue.ll
@@ -0,0 +1 @@
+%new_agg = insertvalue %struct.MyStruct %agg_val, i32 42, 0 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/shufflevector-2.ll b/ir-perf/snippets/pointer/shufflevector-2.ll
new file mode 100644
index 0000000..7eb3730
--- /dev/null
+++ b/ir-perf/snippets/pointer/shufflevector-2.ll
@@ -0,0 +1,2 @@
+%shuffled1 = shufflevector <4 x i32> %vec_val, <4 x i32> %vec_val, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
+%shuffled2 = shufflevector <4 x i32> %shuffled1, <4 x i32> %shuffled1, <4 x i32> <i32 0, i32 1, i32 2, i32 3> 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/shufflevector-4.ll b/ir-perf/snippets/pointer/shufflevector-4.ll
new file mode 100644
index 0000000..8a541c9
--- /dev/null
+++ b/ir-perf/snippets/pointer/shufflevector-4.ll
@@ -0,0 +1,4 @@
+%shuffled1 = shufflevector <4 x i32> %vec_val, <4 x i32> %vec_val, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
+%shuffled2 = shufflevector <4 x i32> %shuffled1, <4 x i32> %shuffled1, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
+%shuffled3 = shufflevector <4 x i32> %shuffled2, <4 x i32> %shuffled2, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
+%shuffled4 = shufflevector <4 x i32> %shuffled3, <4 x i32> %shuffled3, <4 x i32> <i32 2, i32 3, i32 0, i32 1> 
\ No newline at end of file
diff --git a/ir-perf/snippets/pointer/shufflevector.ll b/ir-perf/snippets/pointer/shufflevector.ll
new file mode 100644
index 0000000..c99877c
--- /dev/null
+++ b/ir-perf/snippets/pointer/shufflevector.ll
@@ -0,0 +1 @@
+%shuffled = shufflevector <4 x i32> %vec_val, <4 x i32> %vec_val, <4 x i32> <i32 3, i32 2, i32 1, i32 0> 
\ No newline at end of file
